[{"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\index.js":"1","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\App.js":"2","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\reportWebVitals.js":"3","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\TopBar.js":"4","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\pages\\Authentication.js":"5","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\LoginForm.js":"6","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\SignupForm.js":"7","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ConfirmForm.js":"8","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordCodeForm.js":"9","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordForm.js":"10","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\DiscoverAuth.js":"11","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\AboutUsAuth.js":"12","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\BottomBar.js":"13","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\theme.js":"14","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\utilFunctions.js":"15","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\LanguageButton.js":"16","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\ThemeButton.js":"17","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\TopBarRightMenu.js":"18"},{"size":430,"mtime":1690905152865,"results":"19","hashOfConfig":"20"},{"size":1813,"mtime":1690905136933,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1690277813650,"results":"22","hashOfConfig":"20"},{"size":5058,"mtime":1691243101582,"results":"23","hashOfConfig":"20"},{"size":1555,"mtime":1690817203609,"results":"24","hashOfConfig":"20"},{"size":12315,"mtime":1690824975840,"results":"25","hashOfConfig":"20"},{"size":18705,"mtime":1690825009783,"results":"26","hashOfConfig":"20"},{"size":11888,"mtime":1690825336884,"results":"27","hashOfConfig":"20"},{"size":7403,"mtime":1690825365524,"results":"28","hashOfConfig":"20"},{"size":14492,"mtime":1690825392466,"results":"29","hashOfConfig":"20"},{"size":1628,"mtime":1691243305946,"results":"30","hashOfConfig":"20"},{"size":1609,"mtime":1691243345708,"results":"31","hashOfConfig":"20"},{"size":3622,"mtime":1690825268429,"results":"32","hashOfConfig":"20"},{"size":2579,"mtime":1691235264232,"results":"33","hashOfConfig":"20"},{"size":1282,"mtime":1691243015816,"results":"34","hashOfConfig":"20"},{"size":6212,"mtime":1691241431217,"results":"35","hashOfConfig":"20"},{"size":2752,"mtime":1691240621647,"results":"36","hashOfConfig":"20"},{"size":2941,"mtime":1691243154522,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"g7eer",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\index.js",[],[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\App.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\TopBar.js",["96","97","98"],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\pages\\Authentication.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\LoginForm.js",["99","100","101"],[],"import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Alert, Button, Checkbox, Divider, FormControl, FormControlLabel, Grid, TextField, Typography } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport \"./styles.css\";\r\nimport { useTheme } from \"@mui/system\";\r\n\r\nfunction LoginForm(){\r\n\r\n    const navigate = useNavigate();\r\n\r\n    //Variabili per il settaggio e il controllo dell'email.\r\n    const [email, setEmail] = useState(\"\");\r\n    const [emailValid, setEmailValid] = useState(false);\r\n    const [emailEmpty, setEmailEmpty] = useState(true);\r\n\r\n    //Funzione per controllare il campo \"Email\".\r\n    const onChangeEmail = (event) => {\r\n        const inputEmail = event.target.value;\r\n        setEmail(inputEmail);\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n        var valid;\r\n        var empty;\r\n\r\n        if(inputEmail === \"\"){\r\n            valid = false;\r\n            empty = true;\r\n        }else{\r\n            valid = emailRegex.test(inputEmail);\r\n            empty = false;\r\n        }\r\n        \r\n        if(empty){\r\n            setEmailEmpty(true);\r\n            setEmailValid(false);\r\n        }else{\r\n            if(valid){\r\n                setEmailEmpty(false);\r\n                setEmailValid(true);\r\n            }else{\r\n                setEmailEmpty(false);\r\n                setEmailValid(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordEmpty, setPasswordEmpty] = useState(true);\r\n    const [passwordValid, setPasswordValid] = useState(false);\r\n\r\n    const onChangePassword = (event) => {\r\n        const inputPassword = event.target.value;\r\n        setPassword(inputPassword);\r\n\r\n        const spaces = /(?=\\s)/;\r\n        const valid = spaces.test(inputPassword);\r\n\r\n        if(inputPassword === \"\"){\r\n            setPasswordEmpty(true);\r\n        }else{\r\n            setPasswordEmpty(false);\r\n            if(valid){\r\n                setPasswordValid(true)\r\n            }else{\r\n                setPasswordValid(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabile per il settaggio del checkbox \"Ricordami\".\r\n    const [remembermeChecked, setRemembermeChecked] = useState(false);\r\n\r\n    //Funzione che si esegue quando il checkbox \"Ricordami\" cambia e setta la variabile.\r\n    const onChangeRememberme = (event) => {\r\n        setAlert(false)\r\n        const checked = event.target.checked;\r\n        if(checked){\r\n            setRemembermeChecked(true)\r\n        }else{\r\n            setRemembermeChecked(false)\r\n        }\r\n    }\r\n\r\n    //Funzione che si esegue quando clicchi sul testo \"Hai dimenticato la password?\".\r\n    const onClickForgotPassword = () => {\r\n        navigate(\"/forgotPasswordCode\")\r\n    }\r\n\r\n    //Variabili per il settaggio del caricamento del loading button, del testo del messaggio dell'alert,\r\n    //dell'attivazione dell'alert, del check del \"ricordami\".\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState([]);\r\n    const [alert, setAlert] = useState(false);\r\n\r\n    //Funzione che si esegue quando clicchi sul pulsante \"Esegui l'accesso\".\r\n    //AAA: Quando aggiungeremo il backend bisogna configurare attentamente questa funzione.\r\n    const onPressSignIn = async(e) =>{\r\n        e.preventDefault()\r\n        setLoading(true);\r\n        setAlert(false);\r\n        setMessage([]);\r\n\r\n        const mainAlertMessages = () => {\r\n            setMessage([])\r\n            const messages = [\r\n                { key: \"emailInvalid\", message: \"Verifica che l'email inserita sia in un formato corretto.\", visible: !emailValid && !passwordEmpty && !emailEmpty},\r\n                { key: \"emailEmpty\", message: \"Verifica che tutti i campi siano compilati.\", visible: passwordEmpty || emailEmpty },    \r\n                { key: \"passwordInvalid\", message: \"La password inserita non è corretta.\", visible: passwordValid && !passwordEmpty && !emailEmpty}\r\n            ];\r\n            return messages;\r\n        };\r\n\r\n        const messages = mainAlertMessages();\r\n        const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n\r\n        if(!allConditionsSatisfied){\r\n            setAlert(true);\r\n            setMessage(messages);\r\n            setLoading(false);\r\n        }else{\r\n            setAlert(false);\r\n            setMessage([]);\r\n            /*\r\n            await Auth.signIn(email, password)\r\n            .then((data) => {\r\n                if(remembermeChecked){\r\n                    rememberDevice()\r\n                }else{\r\n                    window.location.reload(false)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                switch (error.message) {\r\n                    case \"Incorrect username or password.\":\r\n                        setAlert(true)\r\n                        setMessage(\"L'username o la password non sono corretti.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Custom auth lambda trigger is not configured for the user pool.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Verifica che tutti i campi siano stati compilati.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Username cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Verifica che tutti i campi siano stati compilati.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"User does not exist.\":\r\n                        setAlert(true)\r\n                        setMessage(\"L'utente non esiste.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Attempt limit exceeded, please try after some time.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Hai effettuato troppi tentativi, riprova in seguito.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"User is not confirmed.\":\r\n                        */ \r\n                        sendConfirmCode();\r\n                        /*\r\n                        setLoading(false)\r\n                        break;\r\n                    default:\r\n                        setAlert(false)\r\n                        setMessage('')\r\n                        setLoading(false)\r\n                        break;\r\n                }*/\r\n            }\r\n    }\r\n\r\n    //Funzione evocata quando si accede con un account che non è stato ancora confermato\r\n    //Rinvia il codice di conferma e passa alla pagina di Conferma Account\r\n    const sendConfirmCode = () => {\r\n        /*await Auth.resendSignUp(email)\r\n        .then((data) => {\r\n            */\r\n            localStorage.setItem(\"email\", email);\r\n            navigate(\"/confirmAccount\")\r\n            /*\r\n        })\r\n        */\r\n    }\r\n\r\n    //Funzione che si esegue quando clicchi il pulsante \"Crea un account\".\r\n    const onPressSignUp = () => {\r\n        navigate(\"/signup\")\r\n    }\r\n\r\n    return(\r\n        <div className=\"login-container\">\r\n            <FormControl component=\"form\">\r\n                <Grid container rowSpacing={2} columnSpacing={1} display=\"flex\">\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" align=\"center\" color=\"primary\" fontWeight=\"bold\">\r\n                            Accedi\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !alert && \"none\"}}\r\n                        >\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {message.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                        autoComplete=\"email\"\r\n                        type=\"email\"  \r\n                        label=\"Email\" \r\n                        variant=\"outlined\" \r\n                        fullWidth\r\n                        onChange={onChangeEmail}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"current-password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={onChangePassword}\r\n                        />\r\n                        <Grid container rowSpacing={1} columnSpacing={1}>\r\n                            <Grid item xs={4}>\r\n                                <FormControlLabel \r\n                                control={\r\n                                <Checkbox \r\n                                onChange={onChangeRememberme}\r\n                                />\r\n                                } \r\n                                label={\r\n                                    <Typography \r\n                                    marginLeft=\"-5px\"\r\n                                    fontSize=\"15px\">\r\n                                        Ricordami\r\n                                    </Typography>\r\n                                }/>\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n                                <Typography \r\n                                align=\"right\"\r\n                                variant=\"subtitle1\" \r\n                                fontSize=\"15px\"\r\n                                onClick={onClickForgotPassword}\r\n                                tabIndex={0}\r\n                                style={{cursor: \"pointer\", marginTop:\"9px\", marginRight: \"5px\", marginBottom: \"10px\"}}>\r\n                                    Hai dimenticato la password?\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container rowSpacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <LoadingButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\" \r\n                                fullWidth\r\n                                loading={loading}\r\n                                onClick={onPressSignIn}\r\n                                >\r\n                                    Effettua l'accesso\r\n                                </LoadingButton>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Divider>\r\n                                    <Typography \r\n                                    id=\"text_divider\" \r\n                                    variant=\"button\"\r\n                                    fontSize=\"12px\"\r\n                                    >\r\n                                        Oppure\r\n                                    </Typography>\r\n                                </Divider>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Button \r\n                                id=\"signup_button\" \r\n                                variant=\"contained\" \r\n                                fullWidth\r\n                                onClick={onPressSignUp}\r\n                                >\r\n                                    Crea un account\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\SignupForm.js",["102"],[],"import { Alert, Checkbox, FormControl, FormControlLabel, Grid, TextField, Typography } from \"@mui/material\";\r\nimport \"./styles.css\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SignupForm(){\r\n\r\n    const navigate = useNavigate();\r\n\r\n    //Variabili per il settaggio e il controllo del nickname.\r\n    const [nickname, setNickname] = useState('');\r\n    const [showNicknameAlert, setShowNicknameAlert] = useState(false);\r\n    const [nicknameEmpty, setNicknameEmpty] = useState(true);\r\n\r\n    //Funzione per controllare il campo \"Nome utente\".\r\n    const onChangeNickname = (event) => {\r\n        const inputNickname = event.target.value;\r\n        const regex = /^[a-zA-Z0-9_.]+$/;\r\n        setNickname(inputNickname);\r\n        var valid = false;\r\n        var empty = true;\r\n        if(inputNickname === \"\"){\r\n            valid = false;\r\n            empty = true;\r\n        }else{\r\n            valid = regex.test(inputNickname) && inputNickname.length >= 5 && inputNickname.length <= 30;\r\n            empty = false;\r\n        }\r\n        \r\n        if(empty){\r\n            setShowNicknameAlert(false);\r\n            setNicknameEmpty(true);\r\n        }else{\r\n            if(valid){\r\n                setShowNicknameAlert(false);\r\n                setNicknameEmpty(false);\r\n            }else{\r\n                setShowNicknameAlert(true);\r\n                setNicknameEmpty(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Variabili per il settaggio e il controllo dell'email.\r\n    const [email, setEmail] = useState(\"\");\r\n    const [showEmailAlert, setShowEmailAlert] = useState(false);\r\n    const [emailEmpty, setEmailEmpty] = useState(true);\r\n\r\n    //Funzione per controllare il campo \"Email\".\r\n    const onChangeEmail = (event) => {\r\n        const inputEmail = event.target.value;\r\n        setEmail(inputEmail);\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n        var valid;\r\n        var empty;\r\n\r\n        if(inputEmail === \"\"){\r\n            valid = false;\r\n            empty = true;\r\n        }else{\r\n            valid = emailRegex.test(inputEmail);\r\n            empty = false;\r\n        }\r\n        \r\n        if(empty){\r\n            setEmailEmpty(true);\r\n            setShowEmailAlert(false);\r\n        }else{\r\n            if(valid){\r\n                setEmailEmpty(false);\r\n                setShowEmailAlert(false);\r\n            }else{\r\n                setEmailEmpty(false);\r\n                setShowEmailAlert(true);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //Variabili per il settaggio e il controllo della password.\r\n    const [password, setPassword] = useState(\"\");\r\n    const [showPasswordAlert, setShowPasswordAlert] = useState(false);\r\n    const [passwordEmpty, setPasswordEmpty] = useState(true);\r\n    const [passwordAlertMessage, setPasswordAlertMessage] = useState([]);\r\n\r\n    //Funzione per controllare il campo \"Password\".\r\n    const onChangePassword = (event) => {\r\n        const inputPassword = event.target.value;\r\n        setPassword(inputPassword);\r\n\r\n        const validatePassword = () => {\r\n            setPasswordAlertMessage([])\r\n            const atLeastOneLowercaseLetter = /(?=.*[a-z])/;\r\n            const atLeastOneUppercaseLetter = /(?=.*[A-Z])/;\r\n            const atLeastOneDigit = /(?=.*\\d)/;\r\n            const atLeastOneSpecialChar = /(?=.*[$*{}()?!@#.%&><':;|_=+\\-,])/;\r\n            const validLength = /^.{8,20}$/;\r\n            const spaces = /(?=\\s)/;\r\n            const messages = [\r\n                { key: \"lowercaseLetter\", message: \"La password deve contenere almeno una lettera minuscola.\", visible: !atLeastOneLowercaseLetter.test(inputPassword) },\r\n                { key: \"uppercaseLetter\", message: \"La password deve contenere almeno una lettera maiuscola.\", visible: !atLeastOneUppercaseLetter.test(inputPassword) },\r\n                { key: \"digit\", message: \"La password deve contenere almeno un numero.\", visible: !atLeastOneDigit.test(inputPassword) },\r\n                { key: \"specialChar\", message: \"La password deve contenere almeno un carattere speciale tra $*{}()?!@#.%&><':;|_=+-,.\", visible: !atLeastOneSpecialChar.test(inputPassword) },\r\n                { key: \"validLength\", message: \"La password deve avere una lunghezza minima di 8 caratteri e massima di 20 caratteri.\", visible: !validLength.test(inputPassword) },\r\n                { key: \"spaces\", message: \"La password non deve contenere spazi.\", visible: spaces.test(inputPassword)}\r\n            ];\r\n            return messages;\r\n        };\r\n\r\n        const messages = validatePassword();\r\n        setPasswordAlertMessage(messages);\r\n\r\n        if (inputPassword === \"\") {\r\n            setShowPasswordAlert(false);\r\n            setPasswordEmpty(true);\r\n        }else {\r\n            const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n            setShowPasswordAlert(!allConditionsSatisfied);\r\n            setPasswordEmpty(false);\r\n        }\r\n        setRepeatPassword(\"\");\r\n        setShowRepeatPasswordAlert(false);\r\n        setRepeatPasswordEmpty(true);\r\n    }\r\n\r\n    //Variavili per il settaggio e il controllo del ripeti password.\r\n    const [showRepeatPasswordAlert, setShowRepeatPasswordAlert] = useState(false);\r\n    const [repeatPasswordEmpty, setRepeatPasswordEmpty] = useState(true);\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n\r\n    //Funzione di controllo per il ripeti password.\r\n    const onChangeRepeatPassword = (event) => {\r\n        const inputRepeatPassword = event.target.value;\r\n        setRepeatPassword(inputRepeatPassword);\r\n\r\n        if(inputRepeatPassword === \"\"){\r\n            setRepeatPasswordEmpty(true);\r\n            setShowRepeatPasswordAlert(false);\r\n        }else{\r\n            if(inputRepeatPassword === password){\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(false);\r\n            }else{\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabile per il settaggio del checkbox \"Accetta i nostri termini e condizioni\".\r\n    const [termsAndConditions, setTermsAndConditions] = useState(false);\r\n\r\n    //Funzione per il settaggio del checkbox \"T&C\".\r\n    const onChangeTermsAndConditions = (event) => {\r\n        const checked = event.target.checked;\r\n        if(checked){\r\n            setTermsAndConditions(true);\r\n        }else{\r\n            setTermsAndConditions(false);\r\n        }\r\n    }\r\n\r\n    //Variabile per il settaggio del checkbox \"Ho più di 18 anni\".\r\n    const [adult, setAdult] = useState(false);\r\n\r\n    //Funzione per il settaggio del checkbox \"Ho più di 18 anni\".\r\n    const onChangeAdult = (event) => {\r\n        const checked = event.target.checked;\r\n        if(checked){\r\n            setAdult(true);\r\n        }else{\r\n            setAdult(false);\r\n        }\r\n    }\r\n\r\n    //Quando clicchi sulla scritta \"Hai già un account? Accedi\".\r\n    const onClickLogin = () => {\r\n        navigate(\"/\");\r\n    }\r\n\r\n    //Variabili per il bottone \"Effettua registrazione\" e per l'alert di eventuali errori\r\n    const [alert, setAlert] = useState(false);\r\n    const [message, setMessage] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //Funzione che si attiva al click di \"Effettua Registrazione\" e verifica se è stato compilato il form correttamente\r\n    // AAA. Quando aggiungeremo il backend bisogna configurare attentamente questa funzione.\r\n    const onClickSignupLoadingButton = async(e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setAlert(false);\r\n        setMessage([]);\r\n\r\n        const mainAlertMessages = () => {\r\n            setMessage([])\r\n            const messages = [\r\n                { key: \"invalidError\", message: \"Verifica che tutti i campi siano stati compilati correttamente.\", visible: showNicknameAlert || showEmailAlert || showPasswordAlert || showRepeatPasswordAlert },\r\n                { key: \"emptyFormError\", message: \"Verifica che i campi non siano vuoti.\", visible: nicknameEmpty || emailEmpty || passwordEmpty || repeatPasswordEmpty },\r\n                { key: \"adultError\", message: \"Devi confermare di avere almeno 18 anni.\", visible: !adult },\r\n                { key: \"termsAndConditionsError\", message: \"Devi accettare i nostri termini e condizioni.\", visible: !termsAndConditions }             \r\n            ];\r\n            return messages;\r\n        };\r\n\r\n        const messages = mainAlertMessages();\r\n        const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n\r\n        if(!allConditionsSatisfied){\r\n            setAlert(true);\r\n            setMessage(messages);\r\n            setLoading(false);\r\n        }else{\r\n            setAlert(false);\r\n            setMessage([]);\r\n            //Si procede con la registrazione da backend\r\n            /*\r\n            await Auth.signUp({\r\n                username: email,\r\n                password: password,\r\n                attributes: {\r\n                  name: nickname\r\n                },\r\n                autoSignIn: {\r\n                    enabled: true,\r\n                }\r\n            })\r\n            .then((data) => {  \r\n            */\r\n            localStorage.setItem(\"email\", email);\r\n            navigate(\"/confirmAccount\");\r\n             /*\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false)\r\n                setAlert(true)\r\n                switch (error.message) {\r\n                    case \"Username should be an email.\":\r\n                        setAlert(true)\r\n                        setLoading(false)\r\n                        setMessage(\"L'email inserita non è valida\")\r\n                        break;\r\n                    case \"Username cannot be empty\":\r\n                        setAlert(true)\r\n                        setLoading(false)\r\n                        setMessage(\"Il campo dell'email non può essere vuoto\")\r\n                        break;\r\n                    case \"Password cannot be empty\":\r\n                        setAlert(true)\r\n                        setLoading(false)\r\n                        setMessage(\"Il campo della password non può essere vuoto\")\r\n                        break;\r\n                    case \"An account with the given email already exists.\":\r\n                        setAlert(true)\r\n                        setLoading(false)\r\n                        setMessage(\"Esiste già un account con questa email\")\r\n                        break;\r\n                    default:\r\n                        setMessage(\"\")\r\n                        setAlert(false)\r\n                        break;\r\n                }\r\n            })\r\n            */\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"signup-container\">\r\n            <FormControl component=\"form\">\r\n                <Grid container rowSpacing={2} columnSpacing={1} display=\"flex\">\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" align=\"center\" color=\"primary\" fontWeight=\"bold\">\r\n                            Registrati\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !alert && \"none\"}}\r\n                        >\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {message.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                        autoComplete=\"username\"\r\n                        type=\"text\"\r\n                        label=\"Nome utente\"\r\n                        fullWidth\r\n                        onChange={onChangeNickname}\r\n                        variant=\"outlined\" />\r\n                        \r\n                        <Alert \r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showNicknameAlert && \"none\"}}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Errore sul nome utente:</Typography>\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            <Typography fontSize=\"13px\">\r\n                                <li>Deve contenere dai 5 ai 30 caratteri.</li> \r\n                            </Typography>\r\n                            <Typography fontSize=\"13px\">\r\n                                <li>Può contenere solo lettere, numeri e i caratteri \"_\" e \".\"</li>\r\n                            </Typography>\r\n                            </ul>\r\n                        </Alert>\r\n                        \r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField \r\n                        autoComplete=\"email\"\r\n                        type=\"email\"  \r\n                        label=\"Email\" \r\n                        variant=\"outlined\" \r\n                        fullWidth\r\n                        onChange={onChangeEmail}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showEmailAlert && \"none\"}}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Formato email non valido.</Typography>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={onChangePassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showPasswordAlert && \"none\"}}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Errore sul formato della password:</Typography>\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {passwordAlertMessage.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Ripeti la password\"\r\n                        variant=\"outlined\"\r\n                        value={repeatPassword}\r\n                        fullWidth\r\n                        onChange={onChangeRepeatPassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showRepeatPasswordAlert && \"none\"}}\r\n                        onChange={onChangeRepeatPassword}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Le password non coincidono.</Typography>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel \r\n                        style={{marginBottom: \"-10px\"}}\r\n                        control={\r\n                        <Checkbox\r\n                        onChange={onChangeTermsAndConditions}\r\n                        />\r\n                        }\r\n                        label={\r\n                            <Typography \r\n                            marginLeft=\"-5px\"\r\n                            fontSize=\"15px\">\r\n                                Accetta i nostri termini e condizioni.\r\n                            </Typography>\r\n                        }/>\r\n                        <FormControlLabel \r\n                        control={\r\n                        <Checkbox \r\n                        onChange={onChangeAdult}\r\n                        />\r\n                        } \r\n                        label={\r\n                            <Typography \r\n                            marginLeft=\"-5px\"\r\n                            fontSize=\"15px\">\r\n                                Ho più di 18 anni.\r\n                            </Typography>\r\n                        }/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container >\r\n                            <Grid item xs={12}>\r\n                                <LoadingButton \r\n                                type=\"submit\"\r\n                                id=\"signup_button\" \r\n                                variant=\"contained\"\r\n                                loading={loading}\r\n                                fullWidth\r\n                                onClick={onClickSignupLoadingButton}\r\n                                >\r\n                                    Effettua registrazione\r\n                                </LoadingButton>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography \r\n                                align=\"right\"\r\n                                variant=\"subtitle1\" \r\n                                fontSize=\"15px\"\r\n                                tabIndex={0}\r\n                                onClick={onClickLogin}\r\n                                style={{cursor: \"pointer\", marginTop:\"9px\", marginRight: \"5px\", marginBottom: \"10px\"}}>\r\n                                    Hai già un account? Effettua l'accesso.\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupForm;","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ConfirmForm.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordCodeForm.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordForm.js",["103","104"],[],"import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Alert, FormControl, Grid, Snackbar, TextField, Typography, useTheme } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport \"./styles.css\";\r\n\r\nfunction ForgotPasswordForm(){\r\n\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const email = localStorage.getItem(\"email\")\r\n\r\n    useEffect(() => {\r\n        if(!email){\r\n            navigate(\"/\");\r\n        }\r\n    },[email, navigate])\r\n\r\n    //Variabili per il settaggio e il controllo della password.\r\n    const [password, setPassword] = useState(\"\");\r\n    const [showPasswordAlert, setShowPasswordAlert] = useState(false);\r\n    const [passwordEmpty, setPasswordEmpty] = useState(true);\r\n    const [passwordAlertMessage, setPasswordAlertMessage] = useState([]);\r\n\r\n    //Funzione per controllare il campo \"Password\".\r\n    const onChangePassword = (event) => {\r\n        const inputPassword = event.target.value;\r\n        setPassword(inputPassword);\r\n\r\n        const validatePassword = () => {\r\n            setPasswordAlertMessage([])\r\n            const atLeastOneLowercaseLetter = /(?=.*[a-z])/;\r\n            const atLeastOneUppercaseLetter = /(?=.*[A-Z])/;\r\n            const atLeastOneDigit = /(?=.*\\d)/;\r\n            const atLeastOneSpecialChar = /(?=.*[$*{}()?!@#.%&><':;|_=+\\-,])/;\r\n            const validLength = /^.{8,20}$/;\r\n            const spaces = /(?=\\s)/;\r\n            const messages = [\r\n                { key: \"lowercaseLetter\", message: \"La password deve contenere almeno una lettera minuscola.\", visible: !atLeastOneLowercaseLetter.test(inputPassword) },\r\n                { key: \"uppercaseLetter\", message: \"La password deve contenere almeno una lettera maiuscola.\", visible: !atLeastOneUppercaseLetter.test(inputPassword) },\r\n                { key: \"digit\", message: \"La password deve contenere almeno un numero.\", visible: !atLeastOneDigit.test(inputPassword) },\r\n                { key: \"specialChar\", message: \"La password deve contenere almeno un carattere speciale tra $*{}()?!@#.%&><':;|_=+-,.\", visible: !atLeastOneSpecialChar.test(inputPassword) },\r\n                { key: \"validLength\", message: \"La password deve avere una lunghezza minima di 8 caratteri e massima di 20 caratteri.\", visible: !validLength.test(inputPassword) },\r\n                { key: \"spaces\", message: \"La password non deve contenere spazi.\", visible: spaces.test(inputPassword)}\r\n            ];\r\n            return messages;\r\n        };\r\n\r\n        const messages = validatePassword();\r\n        setPasswordAlertMessage(messages);\r\n\r\n        if (inputPassword === \"\") {\r\n            setShowPasswordAlert(false);\r\n            setPasswordEmpty(true);\r\n        }else {\r\n            const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n            setShowPasswordAlert(!allConditionsSatisfied);\r\n            setPasswordEmpty(false);\r\n        }\r\n        setRepeatPassword(\"\");\r\n        setShowRepeatPasswordAlert(false);\r\n        setRepeatPasswordEmpty(true);\r\n    }\r\n\r\n    //Variavili per il settaggio e il controllo del ripeti password.\r\n    const [showRepeatPasswordAlert, setShowRepeatPasswordAlert] = useState(false);\r\n    const [repeatPasswordEmpty, setRepeatPasswordEmpty] = useState(true);\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n\r\n    //Funzione di controllo per il ripeti password.\r\n    const onChangeRepeatPassword = (event) => {\r\n        const inputRepeatPassword = event.target.value;\r\n        setRepeatPassword(inputRepeatPassword);\r\n\r\n        if(inputRepeatPassword === \"\"){\r\n            setRepeatPasswordEmpty(true);\r\n            setShowRepeatPasswordAlert(false);\r\n        }else{\r\n            if(inputRepeatPassword === password){\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(false);\r\n            }else{\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabili per il settaggio e il controllo sul codice inserito.\r\n    const [code, setCode] = useState(\"\");\r\n    const [codeEmpty, setCodeEmpty] = useState(true);\r\n    const [codeValid, setCodeValid] = useState(false);\r\n    const [resendCodeAlert, setResendCodeAlert] = useState(false);\r\n\r\n    //Funzione per il controllo della validità e il settaggio del codice.\r\n    const onChangeCode = (event) => {\r\n        const inputCode = event.target.value;\r\n        setCode(inputCode);\r\n        const containsOnlyNumbers = /^\\d+$/.test(inputCode);\r\n        if(inputCode === \"\"){\r\n            setCodeEmpty(true);\r\n        }else{\r\n            setCodeEmpty(false);\r\n            if(containsOnlyNumbers){\r\n                setCodeValid(true);\r\n            }else{\r\n                setCodeValid(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabili per il settaggio del caricamento del loading button, del testo del messaggio dell'alert,\r\n    //dell'attivazione dell'alert.\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState([]);\r\n    const [alert, setAlert] = useState(false);\r\n    const [confirmAlert, setConfirmAlert] = useState(false);\r\n\r\n    //Funzione che si esegue quando clicchi sul pulsante \"Cambia password\".\r\n    //AAA: Quando aggiungeremo il backend bisogna configurare attentamente questa funzione.\r\n    const onPressConfirm = async(e) =>{\r\n        e.preventDefault()\r\n        setLoading(true);\r\n        setAlert(false);\r\n        setMessage([]);\r\n\r\n        const mainAlertMessages = () => {\r\n            setMessage([])\r\n            const messages = [\r\n                { key: \"emptyFormError\", message: \"Verifica che i campi non siano vuoti.\", visible: passwordEmpty || repeatPasswordEmpty || codeEmpty},\r\n                { key: \"codeInvalid\", message: \"Verifica che il codice inserito sia in un formato valido.\", visible: !codeValid && !codeEmpty},\r\n                { key: \"invalidError\", message: \"Verifica che tutti i campi siano stati compilati correttamente.\", visible: showPasswordAlert || showRepeatPasswordAlert }\r\n            ]\r\n            return messages;\r\n        };\r\n\r\n        const messages = mainAlertMessages();\r\n        const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n\r\n        if(!allConditionsSatisfied){\r\n            setAlert(true);\r\n            setMessage(messages);\r\n            setLoading(false);\r\n        }else{\r\n            setAlert(false);\r\n            setMessage([]);\r\n            /*\r\n            Auth.forgotPasswordSubmit(email, code, password)\r\n            .then((data) => {\r\n                */\r\n                setConfirmAlert(true);\r\n                setTimeout(() => {\r\n                    localStorage.removeItem(\"email\");\r\n                    window.location.href=\"/\"\r\n                }, 2500)\r\n                /*\r\n            })\r\n            .catch(error => {\r\n                switch (error.message) {\r\n                    case \"Confirmation code cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo del codice non può essere vuoto.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Username cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo dell'email non può essere vuoto.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Password cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo della password non può essere vuoto.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Username/client id combination not found.\":\r\n                        setAlert(true)\r\n                        setMessage(\"L'email non corrisponde a nessun account registrato.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Invalid code provided, please request a code again.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il codice inserito non è valido.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Invalid verification code provided, please try again.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il codice inserito non è valido.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Attempt limit exceeded, please try after some time.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Hai effettuato troppi tentativi, riprova più tardi.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    default:\r\n                        setAlert(false)\r\n                        setMessage(\"\")\r\n                        setLoading(false)\r\n                        break;\r\n                }\r\n            });\r\n            */\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"forgot-password-container\">\r\n            <FormControl component=\"form\">\r\n                <Grid container rowSpacing={2} columnSpacing={1} display=\"flex\">\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" align=\"center\" color=\"primary\" fontWeight=\"bold\">\r\n                            Recupera Password\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div \r\n                        id=\"text_container\" \r\n                        style={{padding: \"10px\", backgroundColor: theme.palette.background.paper, borderRadius: \"10px\"}}>\r\n                            <Typography \r\n                            variant=\"body1\"\r\n                            align=\"left\">\r\n                                Inserisci una nuova password e il codice ottenuto all'indirizzo:{\" \"}\r\n                                <Typography fontWeight=\"bold\" component=\"span\">{email}</Typography>\r\n                            </Typography>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !alert && \"none\"}}\r\n                        >\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {message.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={onChangePassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showPasswordAlert && \"none\"}}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Errore sul formato della password:</Typography>\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {passwordAlertMessage.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Ripeti la password\"\r\n                        variant=\"outlined\"\r\n                        value={repeatPassword}\r\n                        fullWidth\r\n                        onChange={onChangeRepeatPassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showRepeatPasswordAlert && \"none\"}}\r\n                        onChange={onChangeRepeatPassword}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Le password non coincidono.</Typography>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        type=\"text\"\r\n                        label=\"Codice\"\r\n                        variant=\"outlined\"\r\n                        value={code === \"\"? \"\" : code}\r\n                        fullWidth\r\n                        onChange={onChangeCode}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid item xs={12}>\r\n                            <LoadingButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\" \r\n                            fullWidth\r\n                            loading={loading}\r\n                            onClick={onPressConfirm}\r\n                            >\r\n                                Conferma\r\n                            </LoadingButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n            <Snackbar\r\n            open={confirmAlert} \r\n            autoHideDuration={2500} \r\n            anchorOrigin={{vertical: \"bottom\", horizontal: \"right\"}} \r\n            >\r\n                <Alert severity=\"success\">\r\n                    Password cambiata con successo!\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordForm;","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\DiscoverAuth.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\AboutUsAuth.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\BottomBar.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\theme.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\utilFunctions.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\LanguageButton.js",["105"],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\ThemeButton.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\TopBarRightMenu.js",["106","107"],[],{"ruleId":"108","severity":1,"message":"109","line":1,"column":70,"nodeType":"110","messageId":"111","endLine":1,"endColumn":74},{"ruleId":"108","severity":1,"message":"112","line":11,"column":10,"nodeType":"110","messageId":"111","endLine":11,"endColumn":19},{"ruleId":"108","severity":1,"message":"113","line":12,"column":10,"nodeType":"110","messageId":"111","endLine":12,"endColumn":20},{"ruleId":"108","severity":1,"message":"114","line":6,"column":10,"nodeType":"110","messageId":"111","endLine":6,"endColumn":18},{"ruleId":"108","severity":1,"message":"115","line":48,"column":12,"nodeType":"110","messageId":"111","endLine":48,"endColumn":20},{"ruleId":"108","severity":1,"message":"116","line":72,"column":12,"nodeType":"110","messageId":"111","endLine":72,"endColumn":29},{"ruleId":"108","severity":1,"message":"117","line":12,"column":12,"nodeType":"110","messageId":"111","endLine":12,"endColumn":20},{"ruleId":"108","severity":1,"message":"118","line":93,"column":12,"nodeType":"110","messageId":"111","endLine":93,"endColumn":27},{"ruleId":"108","severity":1,"message":"119","line":93,"column":29,"nodeType":"110","messageId":"111","endLine":93,"endColumn":47},{"ruleId":"108","severity":1,"message":"112","line":5,"column":10,"nodeType":"110","messageId":"111","endLine":5,"endColumn":19},{"ruleId":"108","severity":1,"message":"120","line":1,"column":43,"nodeType":"110","messageId":"111","endLine":1,"endColumn":47},{"ruleId":"108","severity":1,"message":"121","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":27},"no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'isUnitless' is defined but never used.","'useTheme' is defined but never used.","'password' is assigned a value but never used.","'remembermeChecked' is assigned a value but never used.","'nickname' is assigned a value but never used.","'resendCodeAlert' is assigned a value but never used.","'setResendCodeAlert' is assigned a value but never used.","'Mood' is defined but never used.","'ClickAwayListener' is defined but never used."]
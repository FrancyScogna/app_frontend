[{"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\index.js":"1","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\App.js":"2","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\reportWebVitals.js":"3","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\TopBar.js":"4","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\pages\\Authentication.js":"5","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\LoginForm.js":"6","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\SignupForm.js":"7","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ConfirmForm.js":"8","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordCodeForm.js":"9","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordForm.js":"10","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\DiscoverAuth.js":"11","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\AboutUsAuth.js":"12","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\theme.js":"13","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\utilFunctions.js":"14","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\LanguageButton.js":"15","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\ThemeButton.js":"16","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\TopBarRightMenu.js":"17","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\i18n.js":"18","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\Foother.js":"19","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\BottomBar.js":"20","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\pages\\Profile.js":"21"},{"size":454,"mtime":1691319928249,"results":"22","hashOfConfig":"23"},{"size":2010,"mtime":1695382240262,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1690277813650,"results":"25","hashOfConfig":"23"},{"size":4955,"mtime":1693242208034,"results":"26","hashOfConfig":"23"},{"size":2201,"mtime":1693242203432,"results":"27","hashOfConfig":"23"},{"size":12274,"mtime":1693242231411,"results":"28","hashOfConfig":"23"},{"size":18705,"mtime":1693242228706,"results":"29","hashOfConfig":"23"},{"size":11888,"mtime":1693242255139,"results":"30","hashOfConfig":"23"},{"size":7403,"mtime":1693242244285,"results":"31","hashOfConfig":"23"},{"size":14492,"mtime":1693242240474,"results":"32","hashOfConfig":"23"},{"size":1330,"mtime":1693242248049,"results":"33","hashOfConfig":"23"},{"size":1609,"mtime":1693242268013,"results":"34","hashOfConfig":"23"},{"size":2579,"mtime":1693218047994,"results":"35","hashOfConfig":"23"},{"size":1282,"mtime":1691243015816,"results":"36","hashOfConfig":"23"},{"size":6813,"mtime":1693242224977,"results":"37","hashOfConfig":"23"},{"size":2752,"mtime":1693242221432,"results":"38","hashOfConfig":"23"},{"size":2916,"mtime":1693242217190,"results":"39","hashOfConfig":"23"},{"size":580,"mtime":1691320527872,"results":"40","hashOfConfig":"23"},{"size":3861,"mtime":1693242211208,"results":"41","hashOfConfig":"23"},{"size":2152,"mtime":1693242213900,"results":"42","hashOfConfig":"23"},{"size":2418,"mtime":1695400637545,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"g7eer",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\index.js",[],[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\App.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\TopBar.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\pages\\Authentication.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\LoginForm.js",["109","110"],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\SignupForm.js",["111"],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ConfirmForm.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordCodeForm.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\ForgotPasswordForm.js",["112","113"],[],"import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Alert, FormControl, Grid, Snackbar, TextField, Typography, useTheme } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport \"./styles.css\";\r\n\r\nfunction ForgotPasswordForm(){\r\n\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const email = localStorage.getItem(\"email\")\r\n\r\n    useEffect(() => {\r\n        if(!email){\r\n            navigate(\"/\");\r\n        }\r\n    },[email, navigate])\r\n\r\n    //Variabili per il settaggio e il controllo della password.\r\n    const [password, setPassword] = useState(\"\");\r\n    const [showPasswordAlert, setShowPasswordAlert] = useState(false);\r\n    const [passwordEmpty, setPasswordEmpty] = useState(true);\r\n    const [passwordAlertMessage, setPasswordAlertMessage] = useState([]);\r\n\r\n    //Funzione per controllare il campo \"Password\".\r\n    const onChangePassword = (event) => {\r\n        const inputPassword = event.target.value;\r\n        setPassword(inputPassword);\r\n\r\n        const validatePassword = () => {\r\n            setPasswordAlertMessage([])\r\n            const atLeastOneLowercaseLetter = /(?=.*[a-z])/;\r\n            const atLeastOneUppercaseLetter = /(?=.*[A-Z])/;\r\n            const atLeastOneDigit = /(?=.*\\d)/;\r\n            const atLeastOneSpecialChar = /(?=.*[$*{}()?!@#.%&><':;|_=+\\-,])/;\r\n            const validLength = /^.{8,20}$/;\r\n            const spaces = /(?=\\s)/;\r\n            const messages = [\r\n                { key: \"lowercaseLetter\", message: \"La password deve contenere almeno una lettera minuscola.\", visible: !atLeastOneLowercaseLetter.test(inputPassword) },\r\n                { key: \"uppercaseLetter\", message: \"La password deve contenere almeno una lettera maiuscola.\", visible: !atLeastOneUppercaseLetter.test(inputPassword) },\r\n                { key: \"digit\", message: \"La password deve contenere almeno un numero.\", visible: !atLeastOneDigit.test(inputPassword) },\r\n                { key: \"specialChar\", message: \"La password deve contenere almeno un carattere speciale tra $*{}()?!@#.%&><':;|_=+-,.\", visible: !atLeastOneSpecialChar.test(inputPassword) },\r\n                { key: \"validLength\", message: \"La password deve avere una lunghezza minima di 8 caratteri e massima di 20 caratteri.\", visible: !validLength.test(inputPassword) },\r\n                { key: \"spaces\", message: \"La password non deve contenere spazi.\", visible: spaces.test(inputPassword)}\r\n            ];\r\n            return messages;\r\n        };\r\n\r\n        const messages = validatePassword();\r\n        setPasswordAlertMessage(messages);\r\n\r\n        if (inputPassword === \"\") {\r\n            setShowPasswordAlert(false);\r\n            setPasswordEmpty(true);\r\n        }else {\r\n            const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n            setShowPasswordAlert(!allConditionsSatisfied);\r\n            setPasswordEmpty(false);\r\n        }\r\n        setRepeatPassword(\"\");\r\n        setShowRepeatPasswordAlert(false);\r\n        setRepeatPasswordEmpty(true);\r\n    }\r\n\r\n    //Variavili per il settaggio e il controllo del ripeti password.\r\n    const [showRepeatPasswordAlert, setShowRepeatPasswordAlert] = useState(false);\r\n    const [repeatPasswordEmpty, setRepeatPasswordEmpty] = useState(true);\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n\r\n    //Funzione di controllo per il ripeti password.\r\n    const onChangeRepeatPassword = (event) => {\r\n        const inputRepeatPassword = event.target.value;\r\n        setRepeatPassword(inputRepeatPassword);\r\n\r\n        if(inputRepeatPassword === \"\"){\r\n            setRepeatPasswordEmpty(true);\r\n            setShowRepeatPasswordAlert(false);\r\n        }else{\r\n            if(inputRepeatPassword === password){\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(false);\r\n            }else{\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabili per il settaggio e il controllo sul codice inserito.\r\n    const [code, setCode] = useState(\"\");\r\n    const [codeEmpty, setCodeEmpty] = useState(true);\r\n    const [codeValid, setCodeValid] = useState(false);\r\n    const [resendCodeAlert, setResendCodeAlert] = useState(false);\r\n\r\n    //Funzione per il controllo della validità e il settaggio del codice.\r\n    const onChangeCode = (event) => {\r\n        const inputCode = event.target.value;\r\n        setCode(inputCode);\r\n        const containsOnlyNumbers = /^\\d+$/.test(inputCode);\r\n        if(inputCode === \"\"){\r\n            setCodeEmpty(true);\r\n        }else{\r\n            setCodeEmpty(false);\r\n            if(containsOnlyNumbers){\r\n                setCodeValid(true);\r\n            }else{\r\n                setCodeValid(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabili per il settaggio del caricamento del loading button, del testo del messaggio dell'alert,\r\n    //dell'attivazione dell'alert.\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState([]);\r\n    const [alert, setAlert] = useState(false);\r\n    const [confirmAlert, setConfirmAlert] = useState(false);\r\n\r\n    //Funzione che si esegue quando clicchi sul pulsante \"Cambia password\".\r\n    //AAA: Quando aggiungeremo il backend bisogna configurare attentamente questa funzione.\r\n    const onPressConfirm = async(e) =>{\r\n        e.preventDefault()\r\n        setLoading(true);\r\n        setAlert(false);\r\n        setMessage([]);\r\n\r\n        const mainAlertMessages = () => {\r\n            setMessage([])\r\n            const messages = [\r\n                { key: \"emptyFormError\", message: \"Verifica che i campi non siano vuoti.\", visible: passwordEmpty || repeatPasswordEmpty || codeEmpty},\r\n                { key: \"codeInvalid\", message: \"Verifica che il codice inserito sia in un formato valido.\", visible: !codeValid && !codeEmpty},\r\n                { key: \"invalidError\", message: \"Verifica che tutti i campi siano stati compilati correttamente.\", visible: showPasswordAlert || showRepeatPasswordAlert }\r\n            ]\r\n            return messages;\r\n        };\r\n\r\n        const messages = mainAlertMessages();\r\n        const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n\r\n        if(!allConditionsSatisfied){\r\n            setAlert(true);\r\n            setMessage(messages);\r\n            setLoading(false);\r\n        }else{\r\n            setAlert(false);\r\n            setMessage([]);\r\n            /*\r\n            Auth.forgotPasswordSubmit(email, code, password)\r\n            .then((data) => {\r\n                */\r\n                setConfirmAlert(true);\r\n                setTimeout(() => {\r\n                    localStorage.removeItem(\"email\");\r\n                    window.location.href=\"/\"\r\n                }, 2500)\r\n                /*\r\n            })\r\n            .catch(error => {\r\n                switch (error.message) {\r\n                    case \"Confirmation code cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo del codice non può essere vuoto.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Username cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo dell'email non può essere vuoto.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Password cannot be empty\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo della password non può essere vuoto.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Username/client id combination not found.\":\r\n                        setAlert(true)\r\n                        setMessage(\"L'email non corrisponde a nessun account registrato.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Invalid code provided, please request a code again.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il codice inserito non è valido.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Invalid verification code provided, please try again.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Il codice inserito non è valido.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    case \"Attempt limit exceeded, please try after some time.\":\r\n                        setAlert(true)\r\n                        setMessage(\"Hai effettuato troppi tentativi, riprova più tardi.\")\r\n                        setLoading(false)\r\n                        break;\r\n                    default:\r\n                        setAlert(false)\r\n                        setMessage(\"\")\r\n                        setLoading(false)\r\n                        break;\r\n                }\r\n            });\r\n            */\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"forgot-password-container\">\r\n            <FormControl component=\"form\">\r\n                <Grid container rowSpacing={2} columnSpacing={1} display=\"flex\">\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" align=\"center\" color=\"primary\" fontWeight=\"bold\">\r\n                            Recupera Password\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div \r\n                        id=\"text_container\" \r\n                        style={{padding: \"10px\", backgroundColor: theme.palette.background.paper, borderRadius: \"10px\"}}>\r\n                            <Typography \r\n                            variant=\"body1\"\r\n                            align=\"left\">\r\n                                Inserisci una nuova password e il codice ottenuto all'indirizzo:{\" \"}\r\n                                <Typography fontWeight=\"bold\" component=\"span\">{email}</Typography>\r\n                            </Typography>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !alert && \"none\"}}\r\n                        >\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {message.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={onChangePassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showPasswordAlert && \"none\"}}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Errore sul formato della password:</Typography>\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {passwordAlertMessage.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Ripeti la password\"\r\n                        variant=\"outlined\"\r\n                        value={repeatPassword}\r\n                        fullWidth\r\n                        onChange={onChangeRepeatPassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showRepeatPasswordAlert && \"none\"}}\r\n                        onChange={onChangeRepeatPassword}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Le password non coincidono.</Typography>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        type=\"text\"\r\n                        label=\"Codice\"\r\n                        variant=\"outlined\"\r\n                        value={code === \"\"? \"\" : code}\r\n                        fullWidth\r\n                        onChange={onChangeCode}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid item xs={12}>\r\n                            <LoadingButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\" \r\n                            fullWidth\r\n                            loading={loading}\r\n                            onClick={onPressConfirm}\r\n                            >\r\n                                Conferma\r\n                            </LoadingButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n            <Snackbar\r\n            open={confirmAlert} \r\n            autoHideDuration={2500} \r\n            anchorOrigin={{vertical: \"bottom\", horizontal: \"right\"}} \r\n            >\r\n                <Alert severity=\"success\">\r\n                    Password cambiata con successo!\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordForm;","C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\DiscoverAuth.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\authComponents\\AboutUsAuth.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\theme.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\utilFunctions.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\LanguageButton.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\ThemeButton.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\topbarComponents\\TopBarRightMenu.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\libs\\i18n.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\Foother.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\components\\BottomBar.js",[],[],"C:\\Users\\franc\\Desktop\\Progetto\\Frontend\\app_frontend\\src\\pages\\Profile.js",["114"],[],{"ruleId":"115","severity":1,"message":"116","line":47,"column":12,"nodeType":"117","messageId":"118","endLine":47,"endColumn":20},{"ruleId":"115","severity":1,"message":"119","line":71,"column":12,"nodeType":"117","messageId":"118","endLine":71,"endColumn":29},{"ruleId":"115","severity":1,"message":"120","line":12,"column":12,"nodeType":"117","messageId":"118","endLine":12,"endColumn":20},{"ruleId":"115","severity":1,"message":"121","line":93,"column":12,"nodeType":"117","messageId":"118","endLine":93,"endColumn":27},{"ruleId":"115","severity":1,"message":"122","line":93,"column":29,"nodeType":"117","messageId":"118","endLine":93,"endColumn":47},{"ruleId":"123","severity":1,"message":"124","line":18,"column":25,"nodeType":"125","endLine":18,"endColumn":81},"no-unused-vars","'password' is assigned a value but never used.","Identifier","unusedVar","'remembermeChecked' is assigned a value but never used.","'nickname' is assigned a value but never used.","'resendCodeAlert' is assigned a value but never used.","'setResendCodeAlert' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\franc\\\\Desktop\\\\Progetto\\\\Frontend\\\\app_frontend\\\\src\\\\components\\\\authComponents\\\\ForgotPasswordForm.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Alert, Button, Checkbox, Divider, FormControl, FormControlLabel, Grid, Snackbar, TextField, Typography, useTheme } from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ForgotPasswordForm() {\n  _s();\n  const navigate = useNavigate();\n  const theme = useTheme();\n  const email = localStorage.getItem(\"email\");\n  useEffect(() => {\n    if (!email) {\n      navigate(\"/\");\n    }\n  }, [email]);\n\n  //Variabili per il settaggio e il controllo della password.\n  const [password, setPassword] = useState(\"\");\n  const [showPasswordAlert, setShowPasswordAlert] = useState(false);\n  const [passwordEmpty, setPasswordEmpty] = useState(true);\n  const [passwordAlertMessage, setPasswordAlertMessage] = useState([]);\n\n  //Funzione per controllare il campo \"Password\".\n  const onChangePassword = event => {\n    const inputPassword = event.target.value;\n    setPassword(inputPassword);\n    const validatePassword = () => {\n      setPasswordAlertMessage([]);\n      const atLeastOneLowercaseLetter = /(?=.*[a-z])/;\n      const atLeastOneUppercaseLetter = /(?=.*[A-Z])/;\n      const atLeastOneDigit = /(?=.*\\d)/;\n      const atLeastOneSpecialChar = /(?=.*[$*{}()?!@#.%&><':;|_=+\\-,])/;\n      const validLength = /^.{8,20}$/;\n      const spaces = /(?=\\s)/;\n      const messages = [{\n        key: \"lowercaseLetter\",\n        message: \"La password deve contenere almeno una lettera minuscola.\",\n        visible: !atLeastOneLowercaseLetter.test(inputPassword)\n      }, {\n        key: \"uppercaseLetter\",\n        message: \"La password deve contenere almeno una lettera maiuscola.\",\n        visible: !atLeastOneUppercaseLetter.test(inputPassword)\n      }, {\n        key: \"digit\",\n        message: \"La password deve contenere almeno un numero.\",\n        visible: !atLeastOneDigit.test(inputPassword)\n      }, {\n        key: \"specialChar\",\n        message: \"La password deve contenere almeno un carattere speciale tra $*{}()?!@#.%&><':;|_=+-,.\",\n        visible: !atLeastOneSpecialChar.test(inputPassword)\n      }, {\n        key: \"validLength\",\n        message: \"La password deve avere una lunghezza minima di 8 caratteri e massima di 20 caratteri.\",\n        visible: !validLength.test(inputPassword)\n      }, {\n        key: \"spaces\",\n        message: \"La password non deve contenere spazi.\",\n        visible: spaces.test(inputPassword)\n      }];\n      return messages;\n    };\n    const messages = validatePassword();\n    setPasswordAlertMessage(messages);\n    if (inputPassword === \"\") {\n      setShowPasswordAlert(false);\n      setPasswordEmpty(true);\n    } else {\n      const allConditionsSatisfied = messages.every(message => !message.visible);\n      setShowPasswordAlert(!allConditionsSatisfied);\n      setPasswordEmpty(false);\n    }\n    setRepeatPassword(\"\");\n    setShowRepeatPasswordAlert(false);\n    setRepeatPasswordEmpty(true);\n  };\n\n  //Variavili per il settaggio e il controllo del ripeti password.\n  const [showRepeatPasswordAlert, setShowRepeatPasswordAlert] = useState(false);\n  const [repeatPasswordEmpty, setRepeatPasswordEmpty] = useState(true);\n  const [repeatPassword, setRepeatPassword] = useState(\"\");\n\n  //Funzione di controllo per il ripeti password.\n  const onChangeRepeatPassword = event => {\n    const inputRepeatPassword = event.target.value;\n    setRepeatPassword(inputRepeatPassword);\n    if (inputRepeatPassword === \"\") {\n      setRepeatPasswordEmpty(true);\n      setShowRepeatPasswordAlert(false);\n    } else {\n      if (inputRepeatPassword === password) {\n        setRepeatPasswordEmpty(false);\n        setShowRepeatPasswordAlert(false);\n      } else {\n        setRepeatPasswordEmpty(false);\n        setShowRepeatPasswordAlert(true);\n      }\n    }\n  };\n\n  //Variabili per il settaggio e il controllo sul codice inserito.\n  const [code, setCode] = useState(\"\");\n  const [codeEmpty, setCodeEmpty] = useState(true);\n  const [codeValid, setCodeValid] = useState(false);\n  const [resendCodeAlert, setResendCodeAlert] = useState(false);\n\n  //Funzione per il controllo della validità e il settaggio del codice.\n  const onChangeCode = event => {\n    const inputCode = event.target.value;\n    setCode(inputCode);\n    const containsOnlyNumbers = /^\\d+$/.test(inputCode);\n    if (inputCode === \"\") {\n      setCodeEmpty(true);\n    } else {\n      setCodeEmpty(false);\n      if (containsOnlyNumbers) {\n        setCodeValid(true);\n      } else {\n        setCodeValid(false);\n      }\n    }\n  };\n\n  //Funzione che si esegue quando clicchi sul testo \"Non hai ricevuto il codice? Rinvia codice\".\n  const onClickConfirm = () => {\n    /*await Auth.resendSignUp(email)\r\n    .then((data) => {\r\n        */\n    setResendCodeAlert(true);\n    setTimeout(() => {\n      setResendCodeAlert(false);\n    }, 4000);\n    /*\r\n    })\r\n    .catch((error) => {\r\n    console.log(error.message)\r\n    switch (error.message) {\r\n        case \"Username cannot be empty\":\r\n            setLoading(false)\r\n            setAlert(true)\r\n            setMessage(\"Il campo della mail non può essere vuoto.\")\r\n            break;\r\n        case \"User is already confirmed.\":\r\n            setAlert(true)\r\n            setLoading(false)\r\n            setMessage(\"L'utente è già stato confermato.\")\r\n            setTimeout(function(){window.location.href=\"/\"}, 6000)\r\n            break;\r\n        case \"Username/client id combination not found.\":\r\n            setAlert(true)\r\n            setMessage(\"L'email non è associata a nessun account.\")\r\n            setLoading(false)\r\n            break;\r\n        case \"Attempt limit exceeded, please try after some time.\":\r\n            setAlert(true)\r\n            setMessage(\"Hai effettuato troppi tentativi. Riprova più tardi.\")\r\n            setLoading(false)\r\n            break;\r\n        default:\r\n            setAlert(true)\r\n            setMessage(\"\")\r\n            setLoading(false)\r\n            break;\r\n    }\r\n    })*/\n  };\n\n  //Variabili per il settaggio del caricamento del loading button, del testo del messaggio dell'alert,\n  //dell'attivazione dell'alert, del check del \"ricordami\".\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState([]);\n  const [alert, setAlert] = useState(false);\n  const [confirmAlert, setConfirmAlert] = useState(false);\n\n  //Funzione che si esegue quando clicchi sul pulsante \"Esegui l'accesso\".\n  //AAA: Quando aggiungeremo il backend bisogna configurare attentamente questa funzione.\n  const onPressConfirm = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setAlert(false);\n    setMessage([]);\n    const mainAlertMessages = () => {\n      setMessage([]);\n      const messages = [{\n        key: \"codeInvalid\",\n        message: \"Verifica che il codice inserito sia in un formato valido.\",\n        visible: !codeValid && !codeEmpty\n      }, {\n        key: \"emailEmpty\",\n        message: \"Verifica che tutti i campi siano compilati.\",\n        visible: codeEmpty\n      }];\n      return messages;\n    };\n    const messages = mainAlertMessages();\n    const allConditionsSatisfied = messages.every(message => !message.visible);\n    if (!allConditionsSatisfied) {\n      setAlert(true);\n      setMessage(messages);\n      setLoading(false);\n    } else {\n      setAlert(false);\n      setMessage([]);\n      /*\r\n      await Auth.confirmSignUp(email, code)\r\n      .then(() =>{\r\n          */\n      setConfirmAlert(true);\n      setTimeout(() => {\n        localStorage.removeItem(\"email\");\n        window.location.href = \"/\";\n      }, 2500);\n      /*\r\n      })\r\n      .catch((error) => {\r\n      switch (error.message) {\r\n          case \"Confirmation code cannot be empty\":\r\n              setAlert(true)\r\n              setLoading(false)\r\n              setMessage(\"Il campo del codice non può essere vuoto.\")\r\n              break;\r\n          case \"Username cannot be empty\":\r\n              setLoading(false)\r\n              setAlert(true)\r\n              setMessage(\"Il campo della mail non può essere vuoto.\")\r\n              break;\r\n          case \"Invalid verification code provided, please try again.\":\r\n              setLoading(false)\r\n              setAlert(true)\r\n              setMessage(\"Il codice inserito non è valido, per favore ripeti.\")\r\n              break;\r\n          case \"User cannot be confirmed. Current status is CONFIRMED\":\r\n              setLoading(false)\r\n              setAlert(true)\r\n              setMessage(\"L'utente è già stato confermato.\")\r\n              setTimeout(function(){window.location.href=\"/\"}, 6000)\r\n              break;\r\n          case \"Username/client id combination not found.\":\r\n              setLoading(false)\r\n              setAlert(true)\r\n              setMessage(\"L'email non è associata a nessun account.\")\r\n              break;\r\n          case \"Attempt limit exceeded, please try after some time.\":\r\n              setLoading(false)\r\n              setAlert(true)\r\n              setMessage(\"Hai tentato troppe volte, per favore ripeti più avanti.\")\r\n              break;\r\n          default:\r\n              switch (error.name) {\r\n                  case \"Il formato del codice non è valido, verifica che non ci siano spazi.\":\r\n                      setLoading(false)\r\n                      setAlert(true)\r\n                      setMessage()\r\n                      break;\r\n                  default:\r\n                      setLoading(false)\r\n                      setAlert(true)\r\n                      setMessage(\"\")\r\n                      break;\r\n              }\r\n              break;\r\n      }\r\n      })*/\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"confirm-container\",\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      component: \"form\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        rowSpacing: 2,\n        columnSpacing: 1,\n        display: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            align: \"center\",\n            color: \"primary\",\n            fontWeight: \"bold\",\n            children: \"Recupera Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"text_container\",\n            style: {\n              padding: \"10px\",\n              backgroundColor: theme.palette.background.paper,\n              borderRadius: \"10px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              align: \"left\",\n              children: [\"Inserisci una nuova password e il codice ottenuto all'indirizzo:\", \" \", /*#__PURE__*/_jsxDEV(Typography, {\n                fontWeight: \"bold\",\n                component: \"span\",\n                children: email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            style: {\n              marginTop: \"3px\",\n              display: !alert && \"none\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                marginLeft: \"-24px\",\n                marginTop: \"0px\",\n                marginBottom: \"0px\"\n              },\n              children: message.map(message => message.visible && /*#__PURE__*/_jsxDEV(Typography, {\n                fontSize: \"13px\",\n                children: /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: message.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 33\n                }, this)\n              }, message.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            autoComplete: \"new-password\",\n            type: \"password\",\n            label: \"Password\",\n            variant: \"outlined\",\n            fullWidth: true,\n            onChange: onChangePassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            style: {\n              marginTop: \"3px\",\n              display: !showPasswordAlert && \"none\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              fontSize: \"15px\",\n              children: \"Errore sul formato della password:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                marginLeft: \"-24px\",\n                marginTop: \"0px\",\n                marginBottom: \"0px\"\n              },\n              children: passwordAlertMessage.map(message => message.visible && /*#__PURE__*/_jsxDEV(Typography, {\n                fontSize: \"13px\",\n                children: /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: message.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 33\n                }, this)\n              }, message.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            autoComplete: \"new-password\",\n            type: \"password\",\n            label: \"Ripeti la password\",\n            variant: \"outlined\",\n            value: repeatPassword,\n            fullWidth: true,\n            onChange: onChangeRepeatPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            style: {\n              marginTop: \"3px\",\n              display: !showRepeatPasswordAlert && \"none\"\n            },\n            onChange: onChangeRepeatPassword,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              fontSize: \"15px\",\n              children: \"Le password non coincidono.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"text\",\n            label: \"Codice\",\n            variant: \"outlined\",\n            value: code === \"\" ? \"\" : code,\n            fullWidth: true,\n            onChange: onChangeCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n              type: \"submit\",\n              variant: \"contained\",\n              fullWidth: true,\n              loading: loading,\n              onClick: onPressConfirm,\n              children: \"Conferma\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: confirmAlert,\n      autoHideDuration: 2500,\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"right\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        children: \"Account confermato con successo!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: resendCodeAlert,\n      autoHideDuration: 4000,\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"right\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        children: [\"Il codice \\xE8 stato inviato all'indirizzo:\", \" \", /*#__PURE__*/_jsxDEV(Typography, {\n          fontWeight: \"bold\",\n          fontSize: \"14px\",\n          component: \"span\",\n          children: email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n}\n_s(ForgotPasswordForm, \"6DyECp94HkodG9oDfIF2CkHYMrQ=\", false, function () {\n  return [useNavigate, useTheme];\n});\n_c = ForgotPasswordForm;\nexport default ForgotPasswordForm;\nvar _c;\n$RefreshReg$(_c, \"ForgotPasswordForm\");","map":{"version":3,"names":["useEffect","useState","useNavigate","Alert","Button","Checkbox","Divider","FormControl","FormControlLabel","Grid","Snackbar","TextField","Typography","useTheme","LoadingButton","jsxDEV","_jsxDEV","ForgotPasswordForm","_s","navigate","theme","email","localStorage","getItem","password","setPassword","showPasswordAlert","setShowPasswordAlert","passwordEmpty","setPasswordEmpty","passwordAlertMessage","setPasswordAlertMessage","onChangePassword","event","inputPassword","target","value","validatePassword","atLeastOneLowercaseLetter","atLeastOneUppercaseLetter","atLeastOneDigit","atLeastOneSpecialChar","validLength","spaces","messages","key","message","visible","test","allConditionsSatisfied","every","setRepeatPassword","setShowRepeatPasswordAlert","setRepeatPasswordEmpty","showRepeatPasswordAlert","repeatPasswordEmpty","repeatPassword","onChangeRepeatPassword","inputRepeatPassword","code","setCode","codeEmpty","setCodeEmpty","codeValid","setCodeValid","resendCodeAlert","setResendCodeAlert","onChangeCode","inputCode","containsOnlyNumbers","onClickConfirm","setTimeout","loading","setLoading","setMessage","alert","setAlert","confirmAlert","setConfirmAlert","onPressConfirm","e","preventDefault","mainAlertMessages","removeItem","window","location","href","className","children","component","container","rowSpacing","columnSpacing","display","item","xs","variant","align","color","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","id","style","padding","backgroundColor","palette","background","paper","borderRadius","severity","marginTop","marginLeft","marginBottom","map","fontSize","autoComplete","type","label","fullWidth","onChange","onClick","open","autoHideDuration","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["C:/Users/franc/Desktop/Progetto/Frontend/app_frontend/src/components/authComponents/ForgotPasswordForm.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Alert, Button, Checkbox, Divider, FormControl, FormControlLabel, Grid, Snackbar, TextField, Typography, useTheme } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport \"./styles.css\";\r\n\r\nfunction ForgotPasswordForm(){\r\n\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const email = localStorage.getItem(\"email\")\r\n\r\n    useEffect(() => {\r\n        if(!email){\r\n            navigate(\"/\");\r\n        }\r\n    },[email])\r\n\r\n    //Variabili per il settaggio e il controllo della password.\r\n    const [password, setPassword] = useState(\"\");\r\n    const [showPasswordAlert, setShowPasswordAlert] = useState(false);\r\n    const [passwordEmpty, setPasswordEmpty] = useState(true);\r\n    const [passwordAlertMessage, setPasswordAlertMessage] = useState([]);\r\n\r\n    //Funzione per controllare il campo \"Password\".\r\n    const onChangePassword = (event) => {\r\n        const inputPassword = event.target.value;\r\n        setPassword(inputPassword);\r\n\r\n        const validatePassword = () => {\r\n            setPasswordAlertMessage([])\r\n            const atLeastOneLowercaseLetter = /(?=.*[a-z])/;\r\n            const atLeastOneUppercaseLetter = /(?=.*[A-Z])/;\r\n            const atLeastOneDigit = /(?=.*\\d)/;\r\n            const atLeastOneSpecialChar = /(?=.*[$*{}()?!@#.%&><':;|_=+\\-,])/;\r\n            const validLength = /^.{8,20}$/;\r\n            const spaces = /(?=\\s)/;\r\n            const messages = [\r\n                { key: \"lowercaseLetter\", message: \"La password deve contenere almeno una lettera minuscola.\", visible: !atLeastOneLowercaseLetter.test(inputPassword) },\r\n                { key: \"uppercaseLetter\", message: \"La password deve contenere almeno una lettera maiuscola.\", visible: !atLeastOneUppercaseLetter.test(inputPassword) },\r\n                { key: \"digit\", message: \"La password deve contenere almeno un numero.\", visible: !atLeastOneDigit.test(inputPassword) },\r\n                { key: \"specialChar\", message: \"La password deve contenere almeno un carattere speciale tra $*{}()?!@#.%&><':;|_=+-,.\", visible: !atLeastOneSpecialChar.test(inputPassword) },\r\n                { key: \"validLength\", message: \"La password deve avere una lunghezza minima di 8 caratteri e massima di 20 caratteri.\", visible: !validLength.test(inputPassword) },\r\n                { key: \"spaces\", message: \"La password non deve contenere spazi.\", visible: spaces.test(inputPassword)}\r\n            ];\r\n            return messages;\r\n        };\r\n\r\n        const messages = validatePassword();\r\n        setPasswordAlertMessage(messages);\r\n\r\n        if (inputPassword === \"\") {\r\n            setShowPasswordAlert(false);\r\n            setPasswordEmpty(true);\r\n        }else {\r\n            const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n            setShowPasswordAlert(!allConditionsSatisfied);\r\n            setPasswordEmpty(false);\r\n        }\r\n        setRepeatPassword(\"\");\r\n        setShowRepeatPasswordAlert(false);\r\n        setRepeatPasswordEmpty(true);\r\n    }\r\n\r\n    //Variavili per il settaggio e il controllo del ripeti password.\r\n    const [showRepeatPasswordAlert, setShowRepeatPasswordAlert] = useState(false);\r\n    const [repeatPasswordEmpty, setRepeatPasswordEmpty] = useState(true);\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n\r\n    //Funzione di controllo per il ripeti password.\r\n    const onChangeRepeatPassword = (event) => {\r\n        const inputRepeatPassword = event.target.value;\r\n        setRepeatPassword(inputRepeatPassword);\r\n\r\n        if(inputRepeatPassword === \"\"){\r\n            setRepeatPasswordEmpty(true);\r\n            setShowRepeatPasswordAlert(false);\r\n        }else{\r\n            if(inputRepeatPassword === password){\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(false);\r\n            }else{\r\n                setRepeatPasswordEmpty(false);\r\n                setShowRepeatPasswordAlert(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Variabili per il settaggio e il controllo sul codice inserito.\r\n    const [code, setCode] = useState(\"\");\r\n    const [codeEmpty, setCodeEmpty] = useState(true);\r\n    const [codeValid, setCodeValid] = useState(false);\r\n    const [resendCodeAlert, setResendCodeAlert] = useState(false);\r\n\r\n    //Funzione per il controllo della validità e il settaggio del codice.\r\n    const onChangeCode = (event) => {\r\n        const inputCode = event.target.value;\r\n        setCode(inputCode);\r\n        const containsOnlyNumbers = /^\\d+$/.test(inputCode);\r\n        if(inputCode === \"\"){\r\n            setCodeEmpty(true);\r\n        }else{\r\n            setCodeEmpty(false);\r\n            if(containsOnlyNumbers){\r\n                setCodeValid(true);\r\n            }else{\r\n                setCodeValid(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Funzione che si esegue quando clicchi sul testo \"Non hai ricevuto il codice? Rinvia codice\".\r\n    const onClickConfirm = () => {\r\n        /*await Auth.resendSignUp(email)\r\n        .then((data) => {\r\n            */\r\n            setResendCodeAlert(true);\r\n            setTimeout(() => {\r\n                setResendCodeAlert(false);\r\n            }, 4000)\r\n            /*\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.message)\r\n            switch (error.message) {\r\n                case \"Username cannot be empty\":\r\n                    setLoading(false)\r\n                    setAlert(true)\r\n                    setMessage(\"Il campo della mail non può essere vuoto.\")\r\n                    break;\r\n                case \"User is already confirmed.\":\r\n                    setAlert(true)\r\n                    setLoading(false)\r\n                    setMessage(\"L'utente è già stato confermato.\")\r\n                    setTimeout(function(){window.location.href=\"/\"}, 6000)\r\n                    break;\r\n                case \"Username/client id combination not found.\":\r\n                    setAlert(true)\r\n                    setMessage(\"L'email non è associata a nessun account.\")\r\n                    setLoading(false)\r\n                    break;\r\n                case \"Attempt limit exceeded, please try after some time.\":\r\n                    setAlert(true)\r\n                    setMessage(\"Hai effettuato troppi tentativi. Riprova più tardi.\")\r\n                    setLoading(false)\r\n                    break;\r\n                default:\r\n                    setAlert(true)\r\n                    setMessage(\"\")\r\n                    setLoading(false)\r\n                    break;\r\n            }\r\n        })*/\r\n    }\r\n\r\n    //Variabili per il settaggio del caricamento del loading button, del testo del messaggio dell'alert,\r\n    //dell'attivazione dell'alert, del check del \"ricordami\".\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState([]);\r\n    const [alert, setAlert] = useState(false);\r\n    const [confirmAlert, setConfirmAlert] = useState(false);\r\n\r\n    //Funzione che si esegue quando clicchi sul pulsante \"Esegui l'accesso\".\r\n    //AAA: Quando aggiungeremo il backend bisogna configurare attentamente questa funzione.\r\n    const onPressConfirm = async(e) =>{\r\n        e.preventDefault()\r\n        setLoading(true);\r\n        setAlert(false);\r\n        setMessage([]);\r\n\r\n        const mainAlertMessages = () => {\r\n            setMessage([])\r\n            const messages = [\r\n                { key: \"codeInvalid\", message: \"Verifica che il codice inserito sia in un formato valido.\", visible: !codeValid && !codeEmpty},\r\n                { key: \"emailEmpty\", message: \"Verifica che tutti i campi siano compilati.\", visible: codeEmpty }            \r\n            ]\r\n            return messages;\r\n        };\r\n\r\n        const messages = mainAlertMessages();\r\n        const allConditionsSatisfied = messages.every((message) => !message.visible);\r\n\r\n        if(!allConditionsSatisfied){\r\n            setAlert(true);\r\n            setMessage(messages);\r\n            setLoading(false);\r\n        }else{\r\n            setAlert(false);\r\n            setMessage([]);\r\n            /*\r\n            await Auth.confirmSignUp(email, code)\r\n            .then(() =>{\r\n                */\r\n                setConfirmAlert(true);\r\n                setTimeout(() => {\r\n                    localStorage.removeItem(\"email\");\r\n                    window.location.href=\"/\"\r\n                }, 2500)\r\n                /*\r\n            })\r\n            .catch((error) => {\r\n                switch (error.message) {\r\n                    case \"Confirmation code cannot be empty\":\r\n                        setAlert(true)\r\n                        setLoading(false)\r\n                        setMessage(\"Il campo del codice non può essere vuoto.\")\r\n                        break;\r\n                    case \"Username cannot be empty\":\r\n                        setLoading(false)\r\n                        setAlert(true)\r\n                        setMessage(\"Il campo della mail non può essere vuoto.\")\r\n                        break;\r\n                    case \"Invalid verification code provided, please try again.\":\r\n                        setLoading(false)\r\n                        setAlert(true)\r\n                        setMessage(\"Il codice inserito non è valido, per favore ripeti.\")\r\n                        break;\r\n                    case \"User cannot be confirmed. Current status is CONFIRMED\":\r\n                        setLoading(false)\r\n                        setAlert(true)\r\n                        setMessage(\"L'utente è già stato confermato.\")\r\n                        setTimeout(function(){window.location.href=\"/\"}, 6000)\r\n                        break;\r\n                    case \"Username/client id combination not found.\":\r\n                        setLoading(false)\r\n                        setAlert(true)\r\n                        setMessage(\"L'email non è associata a nessun account.\")\r\n                        break;\r\n                    case \"Attempt limit exceeded, please try after some time.\":\r\n                        setLoading(false)\r\n                        setAlert(true)\r\n                        setMessage(\"Hai tentato troppe volte, per favore ripeti più avanti.\")\r\n                        break;\r\n                    default:\r\n                        switch (error.name) {\r\n                            case \"Il formato del codice non è valido, verifica che non ci siano spazi.\":\r\n                                setLoading(false)\r\n                                setAlert(true)\r\n                                setMessage()\r\n                                break;\r\n                            default:\r\n                                setLoading(false)\r\n                                setAlert(true)\r\n                                setMessage(\"\")\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n            })*/\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"confirm-container\">\r\n            <FormControl component=\"form\">\r\n                <Grid container rowSpacing={2} columnSpacing={1} display=\"flex\">\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" align=\"center\" color=\"primary\" fontWeight=\"bold\">\r\n                            Recupera Password\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div \r\n                        id=\"text_container\" \r\n                        style={{padding: \"10px\", backgroundColor: theme.palette.background.paper, borderRadius: \"10px\"}}>\r\n                            <Typography \r\n                            variant=\"body1\"\r\n                            align=\"left\">\r\n                                Inserisci una nuova password e il codice ottenuto all'indirizzo:{\" \"}\r\n                                <Typography fontWeight=\"bold\" component=\"span\">{email}</Typography>\r\n                            </Typography>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !alert && \"none\"}}\r\n                        >\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {message.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        onChange={onChangePassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showPasswordAlert && \"none\"}}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Errore sul formato della password:</Typography>\r\n                            <ul style={{marginLeft: \"-24px\", marginTop: \"0px\", marginBottom: \"0px\"}}>\r\n                            {passwordAlertMessage.map((message) => (\r\n                                message.visible && (\r\n                                <Typography key={message.key} fontSize=\"13px\">\r\n                                <li>{message.message}</li>\r\n                                </Typography>\r\n                                )\r\n                            ))}\r\n                            </ul>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        autoComplete=\"new-password\"\r\n                        type=\"password\"\r\n                        label=\"Ripeti la password\"\r\n                        variant=\"outlined\"\r\n                        value={repeatPassword}\r\n                        fullWidth\r\n                        onChange={onChangeRepeatPassword}\r\n                        />\r\n                        <Alert\r\n                        severity=\"error\"\r\n                        style={{marginTop: \"3px\", display: !showRepeatPasswordAlert && \"none\"}}\r\n                        onChange={onChangeRepeatPassword}\r\n                        >\r\n                            <Typography fontSize=\"15px\">Le password non coincidono.</Typography>\r\n                        </Alert>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        type=\"text\"\r\n                        label=\"Codice\"\r\n                        variant=\"outlined\"\r\n                        value={code === \"\"? \"\" : code}\r\n                        fullWidth\r\n                        onChange={onChangeCode}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid item xs={12}>\r\n                            <LoadingButton\r\n                            type=\"submit\"\r\n                            variant=\"contained\" \r\n                            fullWidth\r\n                            loading={loading}\r\n                            onClick={onPressConfirm}\r\n                            >\r\n                                Conferma\r\n                            </LoadingButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </FormControl>\r\n            <Snackbar\r\n            open={confirmAlert} \r\n            autoHideDuration={2500} \r\n            anchorOrigin={{vertical: \"bottom\", horizontal: \"right\"}} \r\n            >\r\n                <Alert severity=\"success\">\r\n                    Account confermato con successo!\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar\r\n            open={resendCodeAlert} \r\n            autoHideDuration={4000} \r\n            anchorOrigin={{vertical: \"bottom\", horizontal: \"right\"}} \r\n            >\r\n                <Alert severity=\"success\">\r\n                    Il codice è stato inviato all'indirizzo:{\" \"}\r\n                    <Typography fontWeight=\"bold\" fontSize=\"14px\" component=\"span\">{email}</Typography>\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordForm;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,eAAe;AAChJ,SAASC,aAAa,QAAQ,UAAU;AACxC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,kBAAkBA,CAAA,EAAE;EAAAC,EAAA;EAEzB,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAMkB,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3CvB,SAAS,CAAC,MAAM;IACZ,IAAG,CAACqB,KAAK,EAAC;MACNF,QAAQ,CAAC,GAAG,CAAC;IACjB;EACJ,CAAC,EAAC,CAACE,KAAK,CAAC,CAAC;;EAEV;EACA,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC2B,aAAa,EAAEC,gBAAgB,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC6B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;;EAEpE;EACA,MAAM+B,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACxCX,WAAW,CAACS,aAAa,CAAC;IAE1B,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;MAC3BN,uBAAuB,CAAC,EAAE,CAAC;MAC3B,MAAMO,yBAAyB,GAAG,aAAa;MAC/C,MAAMC,yBAAyB,GAAG,aAAa;MAC/C,MAAMC,eAAe,GAAG,UAAU;MAClC,MAAMC,qBAAqB,GAAG,mCAAmC;MACjE,MAAMC,WAAW,GAAG,WAAW;MAC/B,MAAMC,MAAM,GAAG,QAAQ;MACvB,MAAMC,QAAQ,GAAG,CACb;QAAEC,GAAG,EAAE,iBAAiB;QAAEC,OAAO,EAAE,0DAA0D;QAAEC,OAAO,EAAE,CAACT,yBAAyB,CAACU,IAAI,CAACd,aAAa;MAAE,CAAC,EACxJ;QAAEW,GAAG,EAAE,iBAAiB;QAAEC,OAAO,EAAE,0DAA0D;QAAEC,OAAO,EAAE,CAACR,yBAAyB,CAACS,IAAI,CAACd,aAAa;MAAE,CAAC,EACxJ;QAAEW,GAAG,EAAE,OAAO;QAAEC,OAAO,EAAE,8CAA8C;QAAEC,OAAO,EAAE,CAACP,eAAe,CAACQ,IAAI,CAACd,aAAa;MAAE,CAAC,EACxH;QAAEW,GAAG,EAAE,aAAa;QAAEC,OAAO,EAAE,uFAAuF;QAAEC,OAAO,EAAE,CAACN,qBAAqB,CAACO,IAAI,CAACd,aAAa;MAAE,CAAC,EAC7K;QAAEW,GAAG,EAAE,aAAa;QAAEC,OAAO,EAAE,uFAAuF;QAAEC,OAAO,EAAE,CAACL,WAAW,CAACM,IAAI,CAACd,aAAa;MAAE,CAAC,EACnK;QAAEW,GAAG,EAAE,QAAQ;QAAEC,OAAO,EAAE,uCAAuC;QAAEC,OAAO,EAAEJ,MAAM,CAACK,IAAI,CAACd,aAAa;MAAC,CAAC,CAC1G;MACD,OAAOU,QAAQ;IACnB,CAAC;IAED,MAAMA,QAAQ,GAAGP,gBAAgB,CAAC,CAAC;IACnCN,uBAAuB,CAACa,QAAQ,CAAC;IAEjC,IAAIV,aAAa,KAAK,EAAE,EAAE;MACtBP,oBAAoB,CAAC,KAAK,CAAC;MAC3BE,gBAAgB,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAK;MACF,MAAMoB,sBAAsB,GAAGL,QAAQ,CAACM,KAAK,CAAEJ,OAAO,IAAK,CAACA,OAAO,CAACC,OAAO,CAAC;MAC5EpB,oBAAoB,CAAC,CAACsB,sBAAsB,CAAC;MAC7CpB,gBAAgB,CAAC,KAAK,CAAC;IAC3B;IACAsB,iBAAiB,CAAC,EAAE,CAAC;IACrBC,0BAA0B,CAAC,KAAK,CAAC;IACjCC,sBAAsB,CAAC,IAAI,CAAC;EAChC,CAAC;;EAED;EACA,MAAM,CAACC,uBAAuB,EAAEF,0BAA0B,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EAC7E,MAAM,CAACsD,mBAAmB,EAAEF,sBAAsB,CAAC,GAAGpD,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACuD,cAAc,EAAEL,iBAAiB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMwD,sBAAsB,GAAIxB,KAAK,IAAK;IACtC,MAAMyB,mBAAmB,GAAGzB,KAAK,CAACE,MAAM,CAACC,KAAK;IAC9Ce,iBAAiB,CAACO,mBAAmB,CAAC;IAEtC,IAAGA,mBAAmB,KAAK,EAAE,EAAC;MAC1BL,sBAAsB,CAAC,IAAI,CAAC;MAC5BD,0BAA0B,CAAC,KAAK,CAAC;IACrC,CAAC,MAAI;MACD,IAAGM,mBAAmB,KAAKlC,QAAQ,EAAC;QAChC6B,sBAAsB,CAAC,KAAK,CAAC;QAC7BD,0BAA0B,CAAC,KAAK,CAAC;MACrC,CAAC,MAAI;QACDC,sBAAsB,CAAC,KAAK,CAAC;QAC7BD,0BAA0B,CAAC,IAAI,CAAC;MACpC;IACJ;EACJ,CAAC;;EAED;EACA,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAG3D,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC4D,SAAS,EAAEC,YAAY,CAAC,GAAG7D,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC8D,SAAS,EAAEC,YAAY,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgE,eAAe,EAAEC,kBAAkB,CAAC,GAAGjE,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMkE,YAAY,GAAIlC,KAAK,IAAK;IAC5B,MAAMmC,SAAS,GAAGnC,KAAK,CAACE,MAAM,CAACC,KAAK;IACpCwB,OAAO,CAACQ,SAAS,CAAC;IAClB,MAAMC,mBAAmB,GAAG,OAAO,CAACrB,IAAI,CAACoB,SAAS,CAAC;IACnD,IAAGA,SAAS,KAAK,EAAE,EAAC;MAChBN,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,MAAI;MACDA,YAAY,CAAC,KAAK,CAAC;MACnB,IAAGO,mBAAmB,EAAC;QACnBL,YAAY,CAAC,IAAI,CAAC;MACtB,CAAC,MAAI;QACDA,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ;EACJ,CAAC;;EAED;EACA,MAAMM,cAAc,GAAGA,CAAA,KAAM;IACzB;AACR;AACA;IACYJ,kBAAkB,CAAC,IAAI,CAAC;IACxBK,UAAU,CAAC,MAAM;MACbL,kBAAkB,CAAC,KAAK,CAAC;IAC7B,CAAC,EAAE,IAAI,CAAC;IACR;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;;EAED;EACA;EACA,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGxE,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC6C,OAAO,EAAE4B,UAAU,CAAC,GAAGzE,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC0E,KAAK,EAAEC,QAAQ,CAAC,GAAG3E,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAAC4E,YAAY,EAAEC,eAAe,CAAC,GAAG7E,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA;EACA,MAAM8E,cAAc,GAAG,MAAMC,CAAC,IAAI;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBR,UAAU,CAAC,IAAI,CAAC;IAChBG,QAAQ,CAAC,KAAK,CAAC;IACfF,UAAU,CAAC,EAAE,CAAC;IAEd,MAAMQ,iBAAiB,GAAGA,CAAA,KAAM;MAC5BR,UAAU,CAAC,EAAE,CAAC;MACd,MAAM9B,QAAQ,GAAG,CACb;QAAEC,GAAG,EAAE,aAAa;QAAEC,OAAO,EAAE,2DAA2D;QAAEC,OAAO,EAAE,CAACgB,SAAS,IAAI,CAACF;MAAS,CAAC,EAC9H;QAAEhB,GAAG,EAAE,YAAY;QAAEC,OAAO,EAAE,6CAA6C;QAAEC,OAAO,EAAEc;MAAU,CAAC,CACpG;MACD,OAAOjB,QAAQ;IACnB,CAAC;IAED,MAAMA,QAAQ,GAAGsC,iBAAiB,CAAC,CAAC;IACpC,MAAMjC,sBAAsB,GAAGL,QAAQ,CAACM,KAAK,CAAEJ,OAAO,IAAK,CAACA,OAAO,CAACC,OAAO,CAAC;IAE5E,IAAG,CAACE,sBAAsB,EAAC;MACvB2B,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC9B,QAAQ,CAAC;MACpB6B,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,MAAI;MACDG,QAAQ,CAAC,KAAK,CAAC;MACfF,UAAU,CAAC,EAAE,CAAC;MACd;AACZ;AACA;AACA;MACgBI,eAAe,CAAC,IAAI,CAAC;MACrBP,UAAU,CAAC,MAAM;QACbjD,YAAY,CAAC6D,UAAU,CAAC,OAAO,CAAC;QAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;MAC5B,CAAC,EAAE,IAAI,CAAC;MACR;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ;EACJ,CAAC;;EAED,oBACItE,OAAA;IAAKuE,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9BxE,OAAA,CAACT,WAAW;MAACkF,SAAS,EAAC,MAAM;MAAAD,QAAA,eACzBxE,OAAA,CAACP,IAAI;QAACiF,SAAS;QAACC,UAAU,EAAE,CAAE;QAACC,aAAa,EAAE,CAAE;QAACC,OAAO,EAAC,MAAM;QAAAL,QAAA,gBAC3DxE,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,eACdxE,OAAA,CAACJ,UAAU;YAACoF,OAAO,EAAC,IAAI;YAACC,KAAK,EAAC,QAAQ;YAACC,KAAK,EAAC,SAAS;YAACC,UAAU,EAAC,MAAM;YAAAX,QAAA,EAAC;UAE1E;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC,eACPvF,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,eACdxE,OAAA;YACAwF,EAAE,EAAC,gBAAgB;YACnBC,KAAK,EAAE;cAACC,OAAO,EAAE,MAAM;cAAEC,eAAe,EAAEvF,KAAK,CAACwF,OAAO,CAACC,UAAU,CAACC,KAAK;cAAEC,YAAY,EAAE;YAAM,CAAE;YAAAvB,QAAA,eAC5FxE,OAAA,CAACJ,UAAU;cACXoF,OAAO,EAAC,OAAO;cACfC,KAAK,EAAC,MAAM;cAAAT,QAAA,GAAC,kEACuD,EAAC,GAAG,eACpExE,OAAA,CAACJ,UAAU;gBAACuF,UAAU,EAAC,MAAM;gBAACV,SAAS,EAAC,MAAM;gBAAAD,QAAA,EAAEnE;cAAK;gBAAA+E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAa,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACPvF,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,eACdxE,OAAA,CAACb,KAAK;YACN6G,QAAQ,EAAC,OAAO;YAChBP,KAAK,EAAE;cAACQ,SAAS,EAAE,KAAK;cAAEpB,OAAO,EAAE,CAAClB,KAAK,IAAI;YAAM,CAAE;YAAAa,QAAA,eAEjDxE,OAAA;cAAIyF,KAAK,EAAE;gBAACS,UAAU,EAAE,OAAO;gBAAED,SAAS,EAAE,KAAK;gBAAEE,YAAY,EAAE;cAAK,CAAE;cAAA3B,QAAA,EACvE1C,OAAO,CAACsE,GAAG,CAAEtE,OAAO,IACjBA,OAAO,CAACC,OAAO,iBACf/B,OAAA,CAACJ,UAAU;gBAAmByG,QAAQ,EAAC,MAAM;gBAAA7B,QAAA,eAC7CxE,OAAA;kBAAAwE,QAAA,EAAK1C,OAAO,CAACA;gBAAO;kBAAAsD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cAAC,GADTzD,OAAO,CAACD,GAAG;gBAAAuD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEhB,CAEf;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACPvF,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,gBACdxE,OAAA,CAACL,SAAS;YACV2G,YAAY,EAAC,cAAc;YAC3BC,IAAI,EAAC,UAAU;YACfC,KAAK,EAAC,UAAU;YAChBxB,OAAO,EAAC,UAAU;YAClByB,SAAS;YACTC,QAAQ,EAAE1F;UAAiB;YAAAoE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACFvF,OAAA,CAACb,KAAK;YACN6G,QAAQ,EAAC,OAAO;YAChBP,KAAK,EAAE;cAACQ,SAAS,EAAE,KAAK;cAAEpB,OAAO,EAAE,CAACnE,iBAAiB,IAAI;YAAM,CAAE;YAAA8D,QAAA,gBAE7DxE,OAAA,CAACJ,UAAU;cAACyG,QAAQ,EAAC,MAAM;cAAA7B,QAAA,EAAC;YAAkC;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAC3EvF,OAAA;cAAIyF,KAAK,EAAE;gBAACS,UAAU,EAAE,OAAO;gBAAED,SAAS,EAAE,KAAK;gBAAEE,YAAY,EAAE;cAAK,CAAE;cAAA3B,QAAA,EACvE1D,oBAAoB,CAACsF,GAAG,CAAEtE,OAAO,IAC9BA,OAAO,CAACC,OAAO,iBACf/B,OAAA,CAACJ,UAAU;gBAAmByG,QAAQ,EAAC,MAAM;gBAAA7B,QAAA,eAC7CxE,OAAA;kBAAAwE,QAAA,EAAK1C,OAAO,CAACA;gBAAO;kBAAAsD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cAAC,GADTzD,OAAO,CAACD,GAAG;gBAAAuD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEhB,CAEf;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACPvF,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,gBACdxE,OAAA,CAACL,SAAS;YACV2G,YAAY,EAAC,cAAc;YAC3BC,IAAI,EAAC,UAAU;YACfC,KAAK,EAAC,oBAAoB;YAC1BxB,OAAO,EAAC,UAAU;YAClB5D,KAAK,EAAEoB,cAAe;YACtBiE,SAAS;YACTC,QAAQ,EAAEjE;UAAuB;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC,eACFvF,OAAA,CAACb,KAAK;YACN6G,QAAQ,EAAC,OAAO;YAChBP,KAAK,EAAE;cAACQ,SAAS,EAAE,KAAK;cAAEpB,OAAO,EAAE,CAACvC,uBAAuB,IAAI;YAAM,CAAE;YACvEoE,QAAQ,EAAEjE,sBAAuB;YAAA+B,QAAA,eAE7BxE,OAAA,CAACJ,UAAU;cAACyG,QAAQ,EAAC,MAAM;cAAA7B,QAAA,EAAC;YAA2B;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACPvF,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,eACdxE,OAAA,CAACL,SAAS;YACV4G,IAAI,EAAC,MAAM;YACXC,KAAK,EAAC,QAAQ;YACdxB,OAAO,EAAC,UAAU;YAClB5D,KAAK,EAAEuB,IAAI,KAAK,EAAE,GAAE,EAAE,GAAGA,IAAK;YAC9B8D,SAAS;YACTC,QAAQ,EAAEvD;UAAa;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACPvF,OAAA,CAACP,IAAI;UAACqF,IAAI;UAACC,EAAE,EAAE,EAAG;UAAAP,QAAA,eACdxE,OAAA,CAACP,IAAI;YAACqF,IAAI;YAACC,EAAE,EAAE,EAAG;YAAAP,QAAA,eACdxE,OAAA,CAACF,aAAa;cACdyG,IAAI,EAAC,QAAQ;cACbvB,OAAO,EAAC,WAAW;cACnByB,SAAS;cACTjD,OAAO,EAAEA,OAAQ;cACjBmD,OAAO,EAAE5C,cAAe;cAAAS,QAAA,EACvB;YAED;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAe;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACdvF,OAAA,CAACN,QAAQ;MACTkH,IAAI,EAAE/C,YAAa;MACnBgD,gBAAgB,EAAE,IAAK;MACvBC,YAAY,EAAE;QAACC,QAAQ,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAxC,QAAA,eAEpDxE,OAAA,CAACb,KAAK;QAAC6G,QAAQ,EAAC,SAAS;QAAAxB,QAAA,EAAC;MAE1B;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACXvF,OAAA,CAACN,QAAQ;MACTkH,IAAI,EAAE3D,eAAgB;MACtB4D,gBAAgB,EAAE,IAAK;MACvBC,YAAY,EAAE;QAACC,QAAQ,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAxC,QAAA,eAEpDxE,OAAA,CAACb,KAAK;QAAC6G,QAAQ,EAAC,SAAS;QAAAxB,QAAA,GAAC,6CACkB,EAAC,GAAG,eAC5CxE,OAAA,CAACJ,UAAU;UAACuF,UAAU,EAAC,MAAM;UAACkB,QAAQ,EAAC,MAAM;UAAC5B,SAAS,EAAC,MAAM;UAAAD,QAAA,EAAEnE;QAAK;UAAA+E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd;AAACrF,EAAA,CApXQD,kBAAkB;EAAA,QAENf,WAAW,EACdW,QAAQ;AAAA;AAAAoH,EAAA,GAHjBhH,kBAAkB;AAsX3B,eAAeA,kBAAkB;AAAC,IAAAgH,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
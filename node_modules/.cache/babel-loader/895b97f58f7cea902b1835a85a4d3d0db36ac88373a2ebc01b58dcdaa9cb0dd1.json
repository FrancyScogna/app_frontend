{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\franc\\\\Desktop\\\\Progetto\\\\Frontend\\\\app_frontend\\\\src\\\\libs\\\\textEditor\\\\Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Editor, EditorState, RichUtils } from 'draft-js';\nimport { Button, Paper } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomEditor = () => {\n  _s();\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  useEffect(() => {\n    // Aggiorna lo stato dell'editor quando cambia il testo selezionato\n    const handleKeyCommand = command => {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n      if (newState) {\n        setEditorState(newState);\n        return 'handled';\n      }\n      return 'not-handled';\n    };\n\n    // Verifica lo stato dell'editor per attivare o disattivare i pulsanti di formattazione\n    const currentStyle = editorState.getCurrentInlineStyle();\n    const isBold = currentStyle.has('BOLD');\n    const isItalic = currentStyle.has('ITALIC');\n    const isUnderline = currentStyle.has('UNDERLINE');\n\n    // Aggiorna il componente quando lo stato dell'editor cambia\n    const onChange = newEditorState => {\n      setEditorState(newEditorState);\n    };\n\n    // Associa gli eventi di formattazione dell'editor\n    editorState.setHandleKeyCommand(handleKeyCommand);\n    editorState.getCurrentStyle = () => currentStyle;\n    return () => {\n      editorState.setHandleKeyCommand(null);\n      editorState.getCurrentStyle = () => EditorState.createEmpty().getCurrentInlineStyle();\n    };\n  }, [editorState]);\n  const handleBoldClick = () => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n  };\n  const handleItalicClick = () => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n  };\n  const handleUnderlineClick = () => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    style: {\n      padding: '16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleBoldClick,\n        variant: editorState.getCurrentInlineStyle().has('BOLD') ? 'contained' : 'outlined',\n        children: \"Bold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleItalicClick,\n        variant: editorState.getCurrentInlineStyle().has('ITALIC') ? 'contained' : 'outlined',\n        children: \"Italic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUnderlineClick,\n        variant: editorState.getCurrentInlineStyle().has('UNDERLINE') ? 'contained' : 'outlined',\n        children: \"Underline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomEditor, \"8IO8FGFpH/fBTH76iuXxH/kmvNQ=\");\n_c = CustomEditor;\nexport default CustomEditor;\nvar _c;\n$RefreshReg$(_c, \"CustomEditor\");","map":{"version":3,"names":["React","useState","useEffect","Editor","EditorState","RichUtils","Button","Paper","jsxDEV","_jsxDEV","CustomEditor","_s","editorState","setEditorState","createEmpty","handleKeyCommand","command","newState","currentStyle","getCurrentInlineStyle","isBold","has","isItalic","isUnderline","onChange","newEditorState","setHandleKeyCommand","getCurrentStyle","handleBoldClick","toggleInlineStyle","handleItalicClick","handleUnderlineClick","elevation","style","padding","children","onClick","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/franc/Desktop/Progetto/Frontend/app_frontend/src/libs/textEditor/Editor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Editor, EditorState, RichUtils } from 'draft-js';\r\nimport { Button, Paper } from '@mui/material';\r\n\r\nconst CustomEditor = () => {\r\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\r\n\r\n  useEffect(() => {\r\n    // Aggiorna lo stato dell'editor quando cambia il testo selezionato\r\n    const handleKeyCommand = (command) => {\r\n      const newState = RichUtils.handleKeyCommand(editorState, command);\r\n      if (newState) {\r\n        setEditorState(newState);\r\n        return 'handled';\r\n      }\r\n      return 'not-handled';\r\n    };\r\n\r\n    // Verifica lo stato dell'editor per attivare o disattivare i pulsanti di formattazione\r\n    const currentStyle = editorState.getCurrentInlineStyle();\r\n    const isBold = currentStyle.has('BOLD');\r\n    const isItalic = currentStyle.has('ITALIC');\r\n    const isUnderline = currentStyle.has('UNDERLINE');\r\n\r\n    // Aggiorna il componente quando lo stato dell'editor cambia\r\n    const onChange = (newEditorState) => {\r\n      setEditorState(newEditorState);\r\n    };\r\n\r\n    // Associa gli eventi di formattazione dell'editor\r\n    editorState.setHandleKeyCommand(handleKeyCommand);\r\n    editorState.getCurrentStyle = () => currentStyle;\r\n\r\n    return () => {\r\n      editorState.setHandleKeyCommand(null);\r\n      editorState.getCurrentStyle = () => EditorState.createEmpty().getCurrentInlineStyle();\r\n    };\r\n  }, [editorState]);\r\n\r\n  const handleBoldClick = () => {\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\r\n  };\r\n\r\n  const handleItalicClick = () => {\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\r\n  };\r\n\r\n  const handleUnderlineClick = () => {\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} style={{ padding: '16px' }}>\r\n      <div>\r\n        <Button onClick={handleBoldClick} variant={editorState.getCurrentInlineStyle().has('BOLD') ? 'contained' : 'outlined'}>\r\n          Bold\r\n        </Button>\r\n        <Button onClick={handleItalicClick} variant={editorState.getCurrentInlineStyle().has('ITALIC') ? 'contained' : 'outlined'}>\r\n          Italic\r\n        </Button>\r\n        <Button onClick={handleUnderlineClick} variant={editorState.getCurrentInlineStyle().has('UNDERLINE') ? 'contained' : 'outlined'}>\r\n          Underline\r\n        </Button>\r\n      </div>\r\n      <Editor\r\n        editorState={editorState}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CustomEditor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
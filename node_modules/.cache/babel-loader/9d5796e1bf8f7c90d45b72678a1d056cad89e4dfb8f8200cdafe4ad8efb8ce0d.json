{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = lexical.$getNodeByKey(key);\n    if (node === null) {\n      return false;\n    }\n    return node.isSelected();\n  });\n}\nfunction useLexicalNodeSelection(key) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [isSelected, setIsSelected] = react.useState(() => isNodeSelected(editor, key));\n  react.useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = react.useCallback(selected => {\n    editor.update(() => {\n      let selection = lexical.$getSelection();\n      if (!lexical.$isNodeSelection(selection)) {\n        selection = lexical.$createNodeSelection();\n        lexical.$setSelection(selection);\n      }\n      if (selected) {\n        selection.add(key);\n      } else {\n        selection.delete(key);\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = react.useCallback(() => {\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n      if (lexical.$isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\nexports.useLexicalNodeSelection = useLexicalNodeSelection;","map":{"version":3,"names":["LexicalComposerContext","require","lexical","react","isNodeSelected","editor","key","getEditorState","read","node","$getNodeByKey","isSelected","useLexicalNodeSelection","useLexicalComposerContext","setIsSelected","useState","useEffect","isMounted","unregister","registerUpdateListener","setSelected","useCallback","selected","update","selection","$getSelection","$isNodeSelection","$createNodeSelection","$setSelection","add","delete","clearSelected","clear","exports"],"sources":["C:/Users/franc/Desktop/Progetto/Frontend/app_frontend/node_modules/@lexical/react/useLexicalNodeSelection.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = lexical.$getNodeByKey(key);\n\n    if (node === null) {\n      return false;\n    }\n\n    return node.isSelected();\n  });\n}\n\nfunction useLexicalNodeSelection(key) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [isSelected, setIsSelected] = react.useState(() => isNodeSelected(editor, key));\n  react.useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = react.useCallback(selected => {\n    editor.update(() => {\n      let selection = lexical.$getSelection();\n\n      if (!lexical.$isNodeSelection(selection)) {\n        selection = lexical.$createNodeSelection();\n        lexical.$setSelection(selection);\n      }\n\n      if (selected) {\n        selection.add(key);\n      } else {\n        selection.delete(key);\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = react.useCallback(() => {\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n\n      if (lexical.$isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\n\nexports.useLexicalNodeSelection = useLexicalNodeSelection;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAChC,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,cAAcA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACnC,OAAOD,MAAM,CAACE,cAAc,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;IACxC,MAAMC,IAAI,GAAGP,OAAO,CAACQ,aAAa,CAACJ,GAAG,CAAC;IAEvC,IAAIG,IAAI,KAAK,IAAI,EAAE;MACjB,OAAO,KAAK;IACd;IAEA,OAAOA,IAAI,CAACE,UAAU,CAAC,CAAC;EAC1B,CAAC,CAAC;AACJ;AAEA,SAASC,uBAAuBA,CAACN,GAAG,EAAE;EACpC,MAAM,CAACD,MAAM,CAAC,GAAGL,sBAAsB,CAACa,yBAAyB,CAAC,CAAC;EACnE,MAAM,CAACF,UAAU,EAAEG,aAAa,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAAC,MAAMX,cAAc,CAACC,MAAM,EAAEC,GAAG,CAAC,CAAC;EACrFH,KAAK,CAACa,SAAS,CAAC,MAAM;IACpB,IAAIC,SAAS,GAAG,IAAI;IACpB,MAAMC,UAAU,GAAGb,MAAM,CAACc,sBAAsB,CAAC,MAAM;MACrD,IAAIF,SAAS,EAAE;QACbH,aAAa,CAACV,cAAc,CAACC,MAAM,EAAEC,GAAG,CAAC,CAAC;MAC5C;IACF,CAAC,CAAC;IACF,OAAO,MAAM;MACXW,SAAS,GAAG,KAAK;MACjBC,UAAU,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,CAACb,MAAM,EAAEC,GAAG,CAAC,CAAC;EACjB,MAAMc,WAAW,GAAGjB,KAAK,CAACkB,WAAW,CAACC,QAAQ,IAAI;IAChDjB,MAAM,CAACkB,MAAM,CAAC,MAAM;MAClB,IAAIC,SAAS,GAAGtB,OAAO,CAACuB,aAAa,CAAC,CAAC;MAEvC,IAAI,CAACvB,OAAO,CAACwB,gBAAgB,CAACF,SAAS,CAAC,EAAE;QACxCA,SAAS,GAAGtB,OAAO,CAACyB,oBAAoB,CAAC,CAAC;QAC1CzB,OAAO,CAAC0B,aAAa,CAACJ,SAAS,CAAC;MAClC;MAEA,IAAIF,QAAQ,EAAE;QACZE,SAAS,CAACK,GAAG,CAACvB,GAAG,CAAC;MACpB,CAAC,MAAM;QACLkB,SAAS,CAACM,MAAM,CAACxB,GAAG,CAAC;MACvB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACD,MAAM,EAAEC,GAAG,CAAC,CAAC;EACjB,MAAMyB,aAAa,GAAG5B,KAAK,CAACkB,WAAW,CAAC,MAAM;IAC5ChB,MAAM,CAACkB,MAAM,CAAC,MAAM;MAClB,MAAMC,SAAS,GAAGtB,OAAO,CAACuB,aAAa,CAAC,CAAC;MAEzC,IAAIvB,OAAO,CAACwB,gBAAgB,CAACF,SAAS,CAAC,EAAE;QACvCA,SAAS,CAACQ,KAAK,CAAC,CAAC;MACnB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC3B,MAAM,CAAC,CAAC;EACZ,OAAO,CAACM,UAAU,EAAES,WAAW,EAAEW,aAAa,CAAC;AACjD;AAEAE,OAAO,CAACrB,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}